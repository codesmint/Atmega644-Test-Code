
644_functions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001882  00001916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  0080010e  0080010e  00001924  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000234  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d64  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c86  00000000  00000000  00002f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00003dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f7  00000000  00000000  0000414e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_20>
      54:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_21>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>

00000070 <__c.1817>:
      70:	54 65 6d 70 20 46 20 3d 20 25 2e 32 66 00           Temp F = %.2f.

0000007e <__c.1815>:
      7e:	54 65 6d 70 20 43 20 3d 20 25 2e 33 66 00           Temp C = %.3f.

0000008c <__c.1808>:
      8c:	20 54 65 6d 70 65 72 61 74 75 72 65 20 53 65 6e      Temperature Sen
      9c:	73 6f 72 00                                         sor.

000000a0 <__c.1800>:
      a0:	52 65 61 64 20 66 72 6f 6d 20 63 6c 6f 63 6b 3a     Read from clock:
	...

000000b1 <__c.1791>:
      b1:	54 65 73 74 69 6e 67 20 55 61 72 74 2e 2e 2e 00     Testing Uart....

000000c1 <__c.1789>:
      c1:	54 65 73 74 69 6e 67 20 55 61 72 74 2e 2e 2e 00     Testing Uart....

000000d1 <__c.1790>:
      d1:	6e 61 6e 00                                         nan.

000000d5 <__c.1788>:
      d5:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e5:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f5:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     105:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     115:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     125:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     135:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     145:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     155:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     165:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     175:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     185:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     195:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a5:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b5:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c5:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d0 e1       	ldi	r29, 0x10	; 16
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e2 e8       	ldi	r30, 0x82	; 130
     1e8:	f8 e1       	ldi	r31, 0x18	; 24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <.do_copy_data_start>

000001ec <.do_copy_data_loop>:
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0

000001f0 <.do_copy_data_start>:
     1f0:	ae 30       	cpi	r26, 0x0E	; 14
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <.do_copy_data_loop>

000001f6 <__do_clear_bss>:
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	ae e0       	ldi	r26, 0x0E	; 14
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a1 37       	cpi	r26, 0x71	; 113
     202:	b1 07       	cpc	r27, r17
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
     20a:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <displaytemp>:
	lcd_goto(LINE4);
	lcd_putc(0x3E);
}

void displaytemp(void)
{
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
	i2c_start_wait(0x90);				//Start communications
     21e:	80 e9       	ldi	r24, 0x90	; 144
     220:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <i2c_start_wait>
	i2c_write(0x51);					//Start Temp Sample
     224:	81 e5       	ldi	r24, 0x51	; 81
     226:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_write>
     22a:	8e ee       	ldi	r24, 0xEE	; 238
     22c:	92 e0       	ldi	r25, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     22e:	28 ec       	ldi	r18, 0xC8	; 200
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <displaytemp+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     238:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     23a:	d9 f7       	brne	.-10     	; 0x232 <displaytemp+0x20>
	_delay_ms(75);						//Wait for sample
	i2c_rep_start(0x90);				//Communicate restart
     23c:	80 e9       	ldi	r24, 0x90	; 144
     23e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_rep_start>
	i2c_write(0xAA);					//Put new sample in registers
     242:	8a ea       	ldi	r24, 0xAA	; 170
     244:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_write>
	i2c_rep_start(0x91);				//Communicate read mode
     248:	81 e9       	ldi	r24, 0x91	; 145
     24a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_rep_start>
	MSB = i2c_readAck();				//Load MSB Byte
     24e:	0e 94 17 04 	call	0x82e	; 0x82e <i2c_readAck>
     252:	80 93 54 01 	sts	0x0154, r24
	LSB = i2c_readNak();				//Load LSB Byte
     256:	0e 94 21 04 	call	0x842	; 0x842 <i2c_readNak>
     25a:	80 93 53 01 	sts	0x0153, r24
	if(MSB >= 0x80) 					//If MSB is 1 result is negative
     25e:	40 91 54 01 	lds	r20, 0x0154
     262:	28 2f       	mov	r18, r24
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	47 ff       	sbrs	r20, 7
     268:	0e c0       	rjmp	.+28     	; 0x286 <displaytemp+0x74>
	{
		temp_c = (float)(((MSB << 8) + LSB) - 65536) / 256;		//Make result Negative
     26a:	94 2f       	mov	r25, r20
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	28 0f       	add	r18, r24
     270:	39 1f       	adc	r19, r25
     272:	b9 01       	movw	r22, r18
     274:	88 27       	eor	r24, r24
     276:	77 fd       	sbrc	r23, 7
     278:	80 95       	com	r24
     27a:	98 2f       	mov	r25, r24
     27c:	60 50       	subi	r22, 0x00	; 0
     27e:	70 40       	sbci	r23, 0x00	; 0
     280:	81 40       	sbci	r24, 0x01	; 1
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	09 c0       	rjmp	.+18     	; 0x298 <displaytemp+0x86>
	}
	else
	{
		temp_c = (float)((MSB << 8 )+ LSB) / 256;		//Shift all bytes by 8
     286:	94 2f       	mov	r25, r20
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	28 0f       	add	r18, r24
     28c:	39 1f       	adc	r19, r25
     28e:	b9 01       	movw	r22, r18
     290:	88 27       	eor	r24, r24
     292:	77 fd       	sbrc	r23, 7
     294:	80 95       	com	r24
     296:	98 2f       	mov	r25, r24
     298:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatsisf>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e8       	ldi	r20, 0x80	; 128
     2a2:	5b e3       	ldi	r21, 0x3B	; 59
     2a4:	0e 94 cb 09 	call	0x1396	; 0x1396 <__mulsf3>
     2a8:	60 93 6d 01 	sts	0x016D, r22
     2ac:	70 93 6e 01 	sts	0x016E, r23
     2b0:	80 93 6f 01 	sts	0x016F, r24
     2b4:	90 93 70 01 	sts	0x0170, r25
	}
	temp_f = (float)(temp_c * 9/5) + 32;			//Convert for f
     2b8:	e0 90 6d 01 	lds	r14, 0x016D
     2bc:	f0 90 6e 01 	lds	r15, 0x016E
     2c0:	00 91 6f 01 	lds	r16, 0x016F
     2c4:	10 91 70 01 	lds	r17, 0x0170
     2c8:	c8 01       	movw	r24, r16
     2ca:	b7 01       	movw	r22, r14
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e1       	ldi	r20, 0x10	; 16
     2d2:	51 e4       	ldi	r21, 0x41	; 65
     2d4:	0e 94 cb 09 	call	0x1396	; 0x1396 <__mulsf3>
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 ea       	ldi	r20, 0xA0	; 160
     2de:	50 e4       	ldi	r21, 0x40	; 64
     2e0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__divsf3>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	52 e4       	ldi	r21, 0x42	; 66
     2ec:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     2f0:	60 93 69 01 	sts	0x0169, r22
     2f4:	70 93 6a 01 	sts	0x016A, r23
     2f8:	80 93 6b 01 	sts	0x016B, r24
     2fc:	90 93 6c 01 	sts	0x016C, r25
	fprintf_P(&lcd_stream, PSTR("Temp C = %.3f"), temp_c);		//Print C
     300:	8d b7       	in	r24, 0x3d	; 61
     302:	9e b7       	in	r25, 0x3e	; 62
     304:	08 97       	sbiw	r24, 0x08	; 8
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	9e bf       	out	0x3e, r25	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	8d bf       	out	0x3d, r24	; 61
     310:	ed b7       	in	r30, 0x3d	; 61
     312:	fe b7       	in	r31, 0x3e	; 62
     314:	31 96       	adiw	r30, 0x01	; 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	c8 2e       	mov	r12, r24
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	d8 2e       	mov	r13, r24
     31e:	ad b7       	in	r26, 0x3d	; 61
     320:	be b7       	in	r27, 0x3e	; 62
     322:	12 96       	adiw	r26, 0x02	; 2
     324:	dc 92       	st	X, r13
     326:	ce 92       	st	-X, r12
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	8e e7       	ldi	r24, 0x7E	; 126
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	93 83       	std	Z+3, r25	; 0x03
     330:	82 83       	std	Z+2, r24	; 0x02
     332:	e4 82       	std	Z+4, r14	; 0x04
     334:	f5 82       	std	Z+5, r15	; 0x05
     336:	06 83       	std	Z+6, r16	; 0x06
     338:	17 83       	std	Z+7, r17	; 0x07
     33a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <fprintf_P>
	lcd_goto(LINE2);											//Move to line 2
     33e:	8d b7       	in	r24, 0x3d	; 61
     340:	9e b7       	in	r25, 0x3e	; 62
     342:	08 96       	adiw	r24, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	9e bf       	out	0x3e, r25	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	8d bf       	out	0x3d, r24	; 61
     34e:	81 e4       	ldi	r24, 0x41	; 65
     350:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_goto>
	fprintf_P(&lcd_stream, PSTR("Temp F = %.2f"), temp_f);		//Print F
     354:	ad b7       	in	r26, 0x3d	; 61
     356:	be b7       	in	r27, 0x3e	; 62
     358:	18 97       	sbiw	r26, 0x08	; 8
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	be bf       	out	0x3e, r27	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	ad bf       	out	0x3d, r26	; 61
     364:	ed b7       	in	r30, 0x3d	; 61
     366:	fe b7       	in	r31, 0x3e	; 62
     368:	31 96       	adiw	r30, 0x01	; 1
     36a:	12 96       	adiw	r26, 0x02	; 2
     36c:	dc 92       	st	X, r13
     36e:	ce 92       	st	-X, r12
     370:	11 97       	sbiw	r26, 0x01	; 1
     372:	80 e7       	ldi	r24, 0x70	; 112
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	93 83       	std	Z+3, r25	; 0x03
     378:	82 83       	std	Z+2, r24	; 0x02
     37a:	80 91 69 01 	lds	r24, 0x0169
     37e:	90 91 6a 01 	lds	r25, 0x016A
     382:	a0 91 6b 01 	lds	r26, 0x016B
     386:	b0 91 6c 01 	lds	r27, 0x016C
     38a:	84 83       	std	Z+4, r24	; 0x04
     38c:	95 83       	std	Z+5, r25	; 0x05
     38e:	a6 83       	std	Z+6, r26	; 0x06
     390:	b7 83       	std	Z+7, r27	; 0x07
     392:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <fprintf_P>
     396:	8d b7       	in	r24, 0x3d	; 61
     398:	9e b7       	in	r25, 0x3e	; 62
     39a:	08 96       	adiw	r24, 0x08	; 8
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	9e bf       	out	0x3e, r25	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	8d bf       	out	0x3d, r24	; 61
}
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <displaytime>:
			_delay_ms(1000);
	}		//Loop Forever
}

void displaytime(void)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	2a 97       	sbiw	r28, 0x0a	; 10
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
	int time;
	char buffer[10];

	i2c_start_wait(0xD0);
     3cc:	80 ed       	ldi	r24, 0xD0	; 208
     3ce:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <i2c_start_wait>
	i2c_write(0x07);
     3d2:	87 e0       	ldi	r24, 0x07	; 7
     3d4:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_write>
	i2c_rep_start(0xD1);
     3d8:	81 ed       	ldi	r24, 0xD1	; 209
     3da:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_rep_start>
	time = i2c_readNak();
     3de:	0e 94 21 04 	call	0x842	; 0x842 <i2c_readNak>
     3e2:	18 2f       	mov	r17, r24
	lcd_clrscr();
     3e4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <lcd_clrscr>
	itoa(time, buffer, 2);
     3e8:	81 2f       	mov	r24, r17
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	8e 01       	movw	r16, r28
     3ee:	0f 5f       	subi	r16, 0xFF	; 255
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
     3f2:	b8 01       	movw	r22, r16
     3f4:	42 e0       	ldi	r20, 0x02	; 2
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <itoa>
	lcd_puts_P(PSTR("Read from clock:"));
     3fc:	80 ea       	ldi	r24, 0xA0	; 160
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <lcd_puts_P>
	lcd_goto(LINE2);
     404:	81 e4       	ldi	r24, 0x41	; 65
     406:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_goto>
	lcd_puts(buffer);
     40a:	c8 01       	movw	r24, r16
     40c:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_puts>
}
     410:	2a 96       	adiw	r28, 0x0a	; 10
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	cf 91       	pop	r28
     41e:	df 91       	pop	r29
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <setuptempsensor>:


void setuptempsensor(void)
{
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	2a 97       	sbiw	r28, 0x0a	; 10
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	char conf;
	char buffer[10];

	
	lcd_clrscr();
     43e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <lcd_clrscr>
	lcd_puts_P(PSTR(" Temperature Sensor"));
     442:	8c e8       	ldi	r24, 0x8C	; 140
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <lcd_puts_P>
	i2c_start_wait(0x90);
     44a:	80 e9       	ldi	r24, 0x90	; 144
     44c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <i2c_start_wait>
	i2c_write(0xAC);
     450:	8c ea       	ldi	r24, 0xAC	; 172
     452:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_write>
	i2c_rep_start(0x91);
     456:	81 e9       	ldi	r24, 0x91	; 145
     458:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_rep_start>
	conf = i2c_readNak();
     45c:	0e 94 21 04 	call	0x842	; 0x842 <i2c_readNak>
     460:	18 2f       	mov	r17, r24
	lcd_goto(LINE2);
     462:	81 e4       	ldi	r24, 0x41	; 65
     464:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_goto>
	itoa(conf, buffer, 2);
     468:	81 2f       	mov	r24, r17
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	8e 01       	movw	r16, r28
     46e:	0f 5f       	subi	r16, 0xFF	; 255
     470:	1f 4f       	sbci	r17, 0xFF	; 255
     472:	b8 01       	movw	r22, r16
     474:	42 e0       	ldi	r20, 0x02	; 2
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <itoa>
	lcd_puts(buffer);
     47c:	c8 01       	movw	r24, r16
     47e:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_puts>

	lcd_goto(LINE4);
     482:	84 e5       	ldi	r24, 0x54	; 84
     484:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_goto>
	lcd_putc(0x3E);
     488:	8e e3       	ldi	r24, 0x3E	; 62
     48a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_putc>
}
     48e:	2a 96       	adiw	r28, 0x0a	; 10
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	cf 91       	pop	r28
     49c:	df 91       	pop	r29
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <main>:
void displaytime(void);



int main(void)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
	fprintf_P(&lcd_stream, PSTR("Temp F = %.2f"), temp_f);		//Print F
}

static inline void initstuff(void)
{
	DDRD = 0xFF;		//Set PortD as Output
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;		//Set PortB as Output
     4ac:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;		//Turn PB0 hight to Light "Power LED"
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	85 b9       	out	0x05, r24	; 5
	lcd_init();			//Initialise the LCD
     4b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <lcd_init>
	i2c_init();
     4b6:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_init>

int main(void)
{

	initstuff();		//Call hardware init function
	uart_init(38400);
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	96 e9       	ldi	r25, 0x96	; 150
     4be:	0e 94 81 04 	call	0x902	; 0x902 <uart_init>
	uart_puts_p(PSTR("Testing Uart..."));
     4c2:	81 ec       	ldi	r24, 0xC1	; 193
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <uart_puts_p>
	lcd_clrscr();		//Clear LCD
     4ca:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <lcd_clrscr>
//	setuptempsensor();
	//displaytemp();
	displaytime();
     4ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <displaytime>
     4d2:	c8 ec       	ldi	r28, 0xC8	; 200
     4d4:	d0 e0       	ldi	r29, 0x00	; 0
	

	for(;;)
	{
			uart_puts_p(PSTR("Testing Uart..."));
     4d6:	81 eb       	ldi	r24, 0xB1	; 177
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 db 04 	call	0x9b6	; 0x9b6 <uart_puts_p>
			uart_putc(0x3E);
     4de:	8e e3       	ldi	r24, 0x3E	; 62
     4e0:	0e 94 b8 04 	call	0x970	; 0x970 <uart_putc>
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	97 e2       	ldi	r25, 0x27	; 39
     4e8:	fe 01       	movw	r30, r28
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <main+0x44>
     4f2:	f1 cf       	rjmp	.-30     	; 0x4d6 <main+0x32>

000004f4 <lcd_write>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
     4f4:	66 23       	and	r22, r22
     4f6:	11 f0       	breq	.+4      	; 0x4fc <lcd_write+0x8>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
     4f8:	10 9a       	sbi	0x02, 0	; 2
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <lcd_write+0xa>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
     4fc:	10 98       	cbi	0x02, 0	; 2
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
     4fe:	87 ff       	sbrs	r24, 7
     500:	02 c0       	rjmp	.+4      	; 0x506 <lcd_write+0x12>
     502:	16 9a       	sbi	0x02, 6	; 2
     504:	01 c0       	rjmp	.+2      	; 0x508 <lcd_write+0x14>
     506:	16 98       	cbi	0x02, 6	; 2
      lcd_db6_port_set(data&_BV(6));
     508:	98 2f       	mov	r25, r24
     50a:	86 ff       	sbrs	r24, 6
     50c:	02 c0       	rjmp	.+4      	; 0x512 <lcd_write+0x1e>
     50e:	15 9a       	sbi	0x02, 5	; 2
     510:	01 c0       	rjmp	.+2      	; 0x514 <lcd_write+0x20>
     512:	15 98       	cbi	0x02, 5	; 2
      lcd_db5_port_set(data&_BV(5));
     514:	95 ff       	sbrs	r25, 5
     516:	02 c0       	rjmp	.+4      	; 0x51c <lcd_write+0x28>
     518:	14 9a       	sbi	0x02, 4	; 2
     51a:	01 c0       	rjmp	.+2      	; 0x51e <lcd_write+0x2a>
     51c:	14 98       	cbi	0x02, 4	; 2
      lcd_db4_port_set(data&_BV(4));
     51e:	94 ff       	sbrs	r25, 4
     520:	02 c0       	rjmp	.+4      	; 0x526 <lcd_write+0x32>
     522:	13 9a       	sbi	0x02, 3	; 2
     524:	01 c0       	rjmp	.+2      	; 0x528 <lcd_write+0x34>
     526:	13 98       	cbi	0x02, 3	; 2

      Delay_ns(100);
     528:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     52a:	12 9a       	sbi	0x02, 2	; 2
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
     52c:	00 c0       	rjmp	.+0      	; 0x52e <lcd_write+0x3a>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <lcd_write+0x3c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     530:	12 98       	cbi	0x02, 2	; 2
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
     532:	93 ff       	sbrs	r25, 3
     534:	02 c0       	rjmp	.+4      	; 0x53a <lcd_write+0x46>
     536:	16 9a       	sbi	0x02, 6	; 2
     538:	01 c0       	rjmp	.+2      	; 0x53c <lcd_write+0x48>
     53a:	16 98       	cbi	0x02, 6	; 2
      lcd_db6_port_set(data&_BV(2));
     53c:	92 ff       	sbrs	r25, 2
     53e:	02 c0       	rjmp	.+4      	; 0x544 <lcd_write+0x50>
     540:	15 9a       	sbi	0x02, 5	; 2
     542:	01 c0       	rjmp	.+2      	; 0x546 <lcd_write+0x52>
     544:	15 98       	cbi	0x02, 5	; 2
      lcd_db5_port_set(data&_BV(1));
     546:	91 ff       	sbrs	r25, 1
     548:	02 c0       	rjmp	.+4      	; 0x54e <lcd_write+0x5a>
     54a:	14 9a       	sbi	0x02, 4	; 2
     54c:	01 c0       	rjmp	.+2      	; 0x550 <lcd_write+0x5c>
     54e:	14 98       	cbi	0x02, 4	; 2
      lcd_db4_port_set(data&_BV(0));
     550:	90 ff       	sbrs	r25, 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <lcd_write+0x64>
     554:	13 9a       	sbi	0x02, 3	; 2
     556:	01 c0       	rjmp	.+2      	; 0x55a <lcd_write+0x66>
     558:	13 98       	cbi	0x02, 3	; 2

      Delay_ns(100);
     55a:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     55c:	12 9a       	sbi	0x02, 2	; 2
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
     55e:	00 c0       	rjmp	.+0      	; 0x560 <lcd_write+0x6c>
     560:	00 c0       	rjmp	.+0      	; 0x562 <lcd_write+0x6e>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     562:	12 98       	cbi	0x02, 2	; 2
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
     564:	16 9a       	sbi	0x02, 6	; 2
      lcd_db6_port_high();
     566:	15 9a       	sbi	0x02, 5	; 2
      lcd_db5_port_high();
     568:	14 9a       	sbi	0x02, 4	; 2
      lcd_db4_port_high();
     56a:	13 9a       	sbi	0x02, 3	; 2
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
     56c:	66 23       	and	r22, r22
     56e:	49 f4       	brne	.+18     	; 0x582 <lcd_write+0x8e>
     570:	84 30       	cpi	r24, 0x04	; 4
     572:	38 f4       	brcc	.+14     	; 0x582 <lcd_write+0x8e>
        Delay_us(1640);
     574:	8f ec       	ldi	r24, 0xCF	; 207
     576:	9c e0       	ldi	r25, 0x0C	; 12
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <lcd_write+0x84>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <lcd_write+0x8a>
     57e:	00 00       	nop
     580:	08 95       	ret
      else Delay_us(40);
     582:	9a e6       	ldi	r25, 0x6A	; 106
     584:	9a 95       	dec	r25
     586:	f1 f7       	brne	.-4      	; 0x584 <lcd_write+0x90>
     588:	00 c0       	rjmp	.+0      	; 0x58a <lcd_write+0x96>
     58a:	08 95       	ret

0000058c <lcd_putchar>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
int lcd_putchar(char c, FILE *stream)
   {
     lcd_write(c,1);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_write>
	 return 0;
   }
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	08 95       	ret

00000598 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_write>
  }
     59e:	08 95       	ret

000005a0 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <lcd_puts_P+0xc>
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
     5a8:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_putc>
     5ac:	fe 01       	movw	r30, r28
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
     5ae:	21 96       	adiw	r28, 0x01	; 1
     5b0:	84 91       	lpm	r24, Z+
     5b2:	88 23       	and	r24, r24
     5b4:	c9 f7       	brne	.-14     	; 0x5a8 <lcd_puts_P+0x8>
      lcd_putc(c);
  }
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <lcd_puts+0xc>
    register char c;

    while ((c=*s++)) 
      lcd_putc(c);
     5c4:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
     5c8:	89 91       	ld	r24, Y+
     5ca:	88 23       	and	r24, r24
     5cc:	d9 f7       	brne	.-10     	; 0x5c4 <lcd_puts+0x8>
      lcd_putc(c);
  }
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_write>
  }
     5da:	08 95       	ret

000005dc <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_command>
  }
     5e2:	08 95       	ret

000005e4 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_command>
  }
     5ea:	08 95       	ret

000005ec <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
     5ec:	80 58       	subi	r24, 0x80	; 128
     5ee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_command>
  }
     5f2:	08 95       	ret

000005f4 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
     5f4:	0a 9a       	sbi	0x01, 2	; 1
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     5f6:	08 9a       	sbi	0x01, 0	; 1
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
     5f8:	09 9a       	sbi	0x01, 1	; 1
    #endif
    lcd_db7_ddr_high();
     5fa:	0e 9a       	sbi	0x01, 6	; 1
    lcd_db6_ddr_high();
     5fc:	0d 9a       	sbi	0x01, 5	; 1
    lcd_db5_ddr_high();
     5fe:	0c 9a       	sbi	0x01, 4	; 1
    lcd_db4_ddr_high();
     600:	0b 9a       	sbi	0x01, 3	; 1
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     602:	12 98       	cbi	0x02, 2	; 2
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
     604:	10 98       	cbi	0x02, 0	; 2
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
     606:	11 98       	cbi	0x02, 1	; 2
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
     608:	16 9a       	sbi	0x02, 6	; 2
    lcd_db6_port_high();
     60a:	15 9a       	sbi	0x02, 5	; 2
    lcd_db5_port_high();
     60c:	14 9a       	sbi	0x02, 4	; 2
    lcd_db4_port_high();
     60e:	13 9a       	sbi	0x02, 3	; 2
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
     610:	8f e2       	ldi	r24, 0x2F	; 47
     612:	95 e7       	ldi	r25, 0x75	; 117
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <lcd_init+0x20>
     618:	00 c0       	rjmp	.+0      	; 0x61a <lcd_init+0x26>
     61a:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
     61c:	16 98       	cbi	0x02, 6	; 2
    lcd_db6_port_low();
     61e:	15 98       	cbi	0x02, 5	; 2
    Delay_ns(100);
     620:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     622:	12 9a       	sbi	0x02, 2	; 2
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     624:	00 c0       	rjmp	.+0      	; 0x626 <lcd_init+0x32>
     626:	00 c0       	rjmp	.+0      	; 0x628 <lcd_init+0x34>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     628:	12 98       	cbi	0x02, 2	; 2
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	90 e2       	ldi	r25, 0x20	; 32
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <lcd_init+0x3a>
     632:	00 c0       	rjmp	.+0      	; 0x634 <lcd_init+0x40>
     634:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     636:	12 9a       	sbi	0x02, 2	; 2
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
     638:	00 c0       	rjmp	.+0      	; 0x63a <lcd_init+0x46>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <lcd_init+0x48>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     63c:	12 98       	cbi	0x02, 2	; 2

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
     63e:	87 ec       	ldi	r24, 0xC7	; 199
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <lcd_init+0x4e>
     646:	00 c0       	rjmp	.+0      	; 0x648 <lcd_init+0x54>
     648:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     64a:	12 9a       	sbi	0x02, 2	; 2
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
     64c:	00 c0       	rjmp	.+0      	; 0x64e <lcd_init+0x5a>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <lcd_init+0x5c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     650:	12 98       	cbi	0x02, 2	; 2

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
     652:	9a e6       	ldi	r25, 0x6A	; 106
     654:	9a 95       	dec	r25
     656:	f1 f7       	brne	.-4      	; 0x654 <lcd_init+0x60>
     658:	00 c0       	rjmp	.+0      	; 0x65a <lcd_init+0x66>

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
     65a:	13 98       	cbi	0x02, 3	; 2
      Delay_ns(100);
     65c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     65e:	12 9a       	sbi	0x02, 2	; 2
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
     660:	00 c0       	rjmp	.+0      	; 0x662 <lcd_init+0x6e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <lcd_init+0x70>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     664:	12 98       	cbi	0x02, 2	; 2
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
     666:	8a e6       	ldi	r24, 0x6A	; 106
     668:	8a 95       	dec	r24
     66a:	f1 f7       	brne	.-4      	; 0x668 <lcd_init+0x74>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <lcd_init+0x7a>

      lcd_db4_port_low();
     66e:	13 98       	cbi	0x02, 3	; 2
      Delay_ns(100);
     670:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     672:	12 9a       	sbi	0x02, 2	; 2
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
     674:	00 c0       	rjmp	.+0      	; 0x676 <lcd_init+0x82>
     676:	00 c0       	rjmp	.+0      	; 0x678 <lcd_init+0x84>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     678:	12 98       	cbi	0x02, 2	; 2
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
     67a:	00 c0       	rjmp	.+0      	; 0x67c <lcd_init+0x88>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <lcd_init+0x8a>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
     67e:	16 9a       	sbi	0x02, 6	; 2
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
     680:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     682:	12 9a       	sbi	0x02, 2	; 2
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
     684:	00 c0       	rjmp	.+0      	; 0x686 <lcd_init+0x92>
     686:	00 c0       	rjmp	.+0      	; 0x688 <lcd_init+0x94>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     688:	12 98       	cbi	0x02, 2	; 2

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
     68a:	9a e6       	ldi	r25, 0x6A	; 106
     68c:	9a 95       	dec	r25
     68e:	f1 f7       	brne	.-4      	; 0x68c <lcd_init+0x98>
     690:	00 c0       	rjmp	.+0      	; 0x692 <lcd_init+0x9e>
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     692:	88 e0       	ldi	r24, 0x08	; 8
     694:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_command>

    //Display Clear
    lcd_clrscr();
     698:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     69c:	86 e0       	ldi	r24, 0x06	; 6
     69e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     6a2:	8c e0       	ldi	r24, 0x0C	; 12
     6a4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_command>
  }
     6a8:	08 95       	ret

000006aa <lcd_getc>:
        }
    #endif

    if (rs)
      {
        lcd_rs_port_high();                             // RS=1: Read Data
     6aa:	10 9a       	sbi	0x02, 0	; 2
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag

    
    lcd_rw_port_high();                               // RW=1: Read Mode
     6ac:	11 9a       	sbi	0x02, 1	; 2

    #if LCD_BITS==4
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
     6ae:	0e 98       	cbi	0x01, 6	; 1
      lcd_db6_ddr_low();
     6b0:	0d 98       	cbi	0x01, 5	; 1
      lcd_db5_ddr_low();
     6b2:	0c 98       	cbi	0x01, 4	; 1
      lcd_db4_ddr_low();
     6b4:	0b 98       	cbi	0x01, 3	; 1
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     6b6:	12 9a       	sbi	0x02, 2	; 2
      lcd_db6_ddr_low();
      lcd_db5_ddr_low();
      lcd_db4_ddr_low();

      lcd_e_port_high();                              // Read High Nibble First
      Delay_ns(500);
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <lcd_getc+0x10>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <lcd_getc+0x12>

      data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
     6bc:	03 99       	sbic	0x00, 3	; 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <lcd_getc+0x1a>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <lcd_getc+0x1c>
     6c4:	20 e1       	ldi	r18, 0x10	; 16
     6c6:	04 99       	sbic	0x00, 4	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <lcd_getc+0x24>
     6ca:	e0 e0       	ldi	r30, 0x00	; 0
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <lcd_getc+0x26>
     6ce:	e0 e2       	ldi	r30, 0x20	; 32
     6d0:	05 99       	sbic	0x00, 5	; 0
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <lcd_getc+0x2e>
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <lcd_getc+0x30>
     6d8:	70 e4       	ldi	r23, 0x40	; 64
     6da:	06 99       	sbic	0x00, 6	; 0
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <lcd_getc+0x38>
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <lcd_getc+0x3a>
     6e2:	60 e8       	ldi	r22, 0x80	; 128
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     6e4:	12 98       	cbi	0x02, 2	; 2

      data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
           lcd_db6_pin_get() << 6 | lcd_db7_pin_get() << 7;

      lcd_e_port_low();
      Delay_ns(500);
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <lcd_getc+0x3e>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <lcd_getc+0x40>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     6ea:	12 9a       	sbi	0x02, 2	; 2

      lcd_e_port_low();
      Delay_ns(500);

      lcd_e_port_high();                              // Read Low Nibble
      Delay_ns(500);
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <lcd_getc+0x44>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <lcd_getc+0x46>

      data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
     6f0:	80 b1       	in	r24, 0x00	; 0
     6f2:	04 99       	sbic	0x00, 4	; 0
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <lcd_getc+0x50>
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <lcd_getc+0x52>
     6fa:	52 e0       	ldi	r21, 0x02	; 2
     6fc:	05 99       	sbic	0x00, 5	; 0
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <lcd_getc+0x5a>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	01 c0       	rjmp	.+2      	; 0x706 <lcd_getc+0x5c>
     704:	44 e0       	ldi	r20, 0x04	; 4
     706:	06 99       	sbic	0x00, 6	; 0
     708:	02 c0       	rjmp	.+4      	; 0x70e <lcd_getc+0x64>
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	01 c0       	rjmp	.+2      	; 0x710 <lcd_getc+0x66>
     70e:	38 e0       	ldi	r19, 0x08	; 8
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     710:	12 98       	cbi	0x02, 2	; 2
      data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
            lcd_db6_pin_get() << 2 | lcd_db7_pin_get() << 3;

      lcd_e_port_low();

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
     712:	0e 9a       	sbi	0x01, 6	; 1
      lcd_db6_ddr_high();
     714:	0d 9a       	sbi	0x01, 5	; 1
      lcd_db5_ddr_high();
     716:	0c 9a       	sbi	0x01, 4	; 1
      lcd_db4_ddr_high();
     718:	0b 9a       	sbi	0x01, 3	; 1

      lcd_db7_port_high();                            // Pins High (Inactive)
     71a:	16 9a       	sbi	0x02, 6	; 2
      lcd_db6_port_high();
     71c:	15 9a       	sbi	0x02, 5	; 2
      lcd_db5_port_high();
     71e:	14 9a       	sbi	0x02, 4	; 2
      lcd_db4_port_high();
     720:	13 9a       	sbi	0x02, 3	; 2
      lcd_db2_port_high();
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif
    
    lcd_rw_port_low();
     722:	11 98       	cbi	0x02, 1	; 2

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
    if (rs)
      Delay_us(40);
     724:	9a e6       	ldi	r25, 0x6A	; 106
     726:	9a 95       	dec	r25
     728:	f1 f7       	brne	.-4      	; 0x726 <lcd_getc+0x7c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <lcd_getc+0x82>
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	f3 e0       	ldi	r31, 0x03	; 3
     730:	96 95       	lsr	r25
     732:	87 95       	ror	r24
     734:	fa 95       	dec	r31
     736:	e1 f7       	brne	.-8      	; 0x730 <lcd_getc+0x86>
     738:	81 70       	andi	r24, 0x01	; 1
     73a:	28 2b       	or	r18, r24
     73c:	2e 2b       	or	r18, r30
     73e:	27 2b       	or	r18, r23
     740:	26 2b       	or	r18, r22
     742:	25 2b       	or	r18, r21
     744:	24 2b       	or	r18, r20
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
  }
     746:	82 2f       	mov	r24, r18
     748:	83 2b       	or	r24, r19
     74a:	08 95       	ret

0000074c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     74c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     750:	8c e0       	ldi	r24, 0x0C	; 12
     752:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     756:	08 95       	ret

00000758 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     758:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     75a:	84 ea       	ldi	r24, 0xA4	; 164
     75c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     760:	80 91 bc 00 	lds	r24, 0x00BC
     764:	87 ff       	sbrs	r24, 7
     766:	fc cf       	rjmp	.-8      	; 0x760 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     768:	80 91 b9 00 	lds	r24, 0x00B9
     76c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     76e:	88 30       	cpi	r24, 0x08	; 8
     770:	21 f0       	breq	.+8      	; 0x77a <i2c_start+0x22>
     772:	80 31       	cpi	r24, 0x10	; 16
     774:	11 f0       	breq	.+4      	; 0x77a <i2c_start+0x22>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	08 95       	ret

	// send device address
	TWDR = address;
     77a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     77e:	84 e8       	ldi	r24, 0x84	; 132
     780:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     784:	80 91 bc 00 	lds	r24, 0x00BC
     788:	87 ff       	sbrs	r24, 7
     78a:	fc cf       	rjmp	.-8      	; 0x784 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     78c:	90 91 b9 00 	lds	r25, 0x00B9
     790:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     792:	98 31       	cpi	r25, 0x18	; 24
     794:	11 f4       	brne	.+4      	; 0x79a <i2c_start+0x42>
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	08 95       	ret
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 34       	cpi	r25, 0x40	; 64
     79e:	09 f0       	breq	.+2      	; 0x7a2 <i2c_start+0x4a>
     7a0:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     7a2:	08 95       	ret

000007a4 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     7a4:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     7a6:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     7a8:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7aa:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     7ac:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     7b0:	80 91 bc 00 	lds	r24, 0x00BC
     7b4:	87 ff       	sbrs	r24, 7
     7b6:	fc cf       	rjmp	.-8      	; 0x7b0 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     7b8:	80 91 b9 00 	lds	r24, 0x00B9
     7bc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     7be:	88 30       	cpi	r24, 0x08	; 8
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <i2c_start_wait+0x22>
     7c2:	80 31       	cpi	r24, 0x10	; 16
     7c4:	99 f7       	brne	.-26     	; 0x7ac <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     7c6:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     7ca:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     7ce:	80 91 bc 00 	lds	r24, 0x00BC
     7d2:	87 ff       	sbrs	r24, 7
     7d4:	fc cf       	rjmp	.-8      	; 0x7ce <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     7d6:	80 91 b9 00 	lds	r24, 0x00B9
     7da:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     7dc:	80 32       	cpi	r24, 0x20	; 32
     7de:	11 f0       	breq	.+4      	; 0x7e4 <i2c_start_wait+0x40>
     7e0:	88 35       	cpi	r24, 0x58	; 88
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7e4:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     7e8:	80 91 bc 00 	lds	r24, 0x00BC
     7ec:	84 fd       	sbrc	r24, 4
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <i2c_start_wait+0x44>
     7f0:	dd cf       	rjmp	.-70     	; 0x7ac <i2c_start_wait+0x8>
     7f2:	08 95       	ret

000007f4 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     7f4:	0e 94 ac 03 	call	0x758	; 0x758 <i2c_start>

}/* i2c_rep_start */
     7f8:	08 95       	ret

000007fa <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7fa:	84 e9       	ldi	r24, 0x94	; 148
     7fc:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     800:	80 91 bc 00 	lds	r24, 0x00BC
     804:	84 fd       	sbrc	r24, 4
     806:	fc cf       	rjmp	.-8      	; 0x800 <i2c_stop+0x6>

}/* i2c_stop */
     808:	08 95       	ret

0000080a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     80a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     80e:	84 e8       	ldi	r24, 0x84	; 132
     810:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     814:	80 91 bc 00 	lds	r24, 0x00BC
     818:	87 ff       	sbrs	r24, 7
     81a:	fc cf       	rjmp	.-8      	; 0x814 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     81c:	80 91 b9 00 	lds	r24, 0x00B9
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	88 7f       	andi	r24, 0xF8	; 248
     824:	88 32       	cpi	r24, 0x28	; 40
     826:	09 f0       	breq	.+2      	; 0x82a <i2c_write+0x20>
     828:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     82a:	89 2f       	mov	r24, r25
     82c:	08 95       	ret

0000082e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     82e:	84 ec       	ldi	r24, 0xC4	; 196
     830:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     834:	80 91 bc 00 	lds	r24, 0x00BC
     838:	87 ff       	sbrs	r24, 7
     83a:	fc cf       	rjmp	.-8      	; 0x834 <i2c_readAck+0x6>

    return TWDR;
     83c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     840:	08 95       	ret

00000842 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     842:	84 e8       	ldi	r24, 0x84	; 132
     844:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     848:	80 91 bc 00 	lds	r24, 0x00BC
     84c:	87 ff       	sbrs	r24, 7
     84e:	fc cf       	rjmp	.-8      	; 0x848 <i2c_readNak+0x6>
	
    return TWDR;
     850:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     854:	08 95       	ret

00000856 <__vector_20>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	2f 93       	push	r18
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     86a:	90 91 c0 00 	lds	r25, 0x00C0
    data = UART0_DATA;
     86e:	20 91 c6 00 	lds	r18, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     872:	e0 91 50 01 	lds	r30, 0x0150
     876:	ef 5f       	subi	r30, 0xFF	; 255
     878:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     87a:	80 91 51 01 	lds	r24, 0x0151
     87e:	e8 17       	cp	r30, r24
     880:	11 f4       	brne	.+4      	; 0x886 <__vector_20+0x30>
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	08 c0       	rjmp	.+16     	; 0x896 <__vector_20+0x40>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     886:	89 2f       	mov	r24, r25
     888:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     88a:	e0 93 50 01 	sts	0x0150, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	e2 5d       	subi	r30, 0xD2	; 210
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     896:	80 93 52 01 	sts	0x0152, r24
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_21>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     8c0:	90 91 4e 01 	lds	r25, 0x014E
     8c4:	80 91 4f 01 	lds	r24, 0x014F
     8c8:	98 17       	cp	r25, r24
     8ca:	69 f0       	breq	.+26     	; 0x8e6 <__vector_21+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     8cc:	e0 91 4f 01 	lds	r30, 0x014F
     8d0:	ef 5f       	subi	r30, 0xFF	; 255
     8d2:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     8d4:	e0 93 4f 01 	sts	0x014F, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	e2 5f       	subi	r30, 0xF2	; 242
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	80 81       	ld	r24, Z
     8e0:	80 93 c6 00 	sts	0x00C6, r24
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <__vector_21+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     8e6:	80 91 c1 00 	lds	r24, 0x00C1
     8ea:	8f 7d       	andi	r24, 0xDF	; 223
     8ec:	80 93 c1 00 	sts	0x00C1, r24
    }
}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     902:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
     904:	10 92 4e 01 	sts	0x014E, r1
    UART_TxTail = 0;
     908:	10 92 4f 01 	sts	0x014F, r1
    UART_RxHead = 0;
     90c:	10 92 50 01 	sts	0x0150, r1
    UART_RxTail = 0;
     910:	10 92 51 01 	sts	0x0151, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     914:	97 ff       	sbrs	r25, 7
     916:	04 c0       	rjmp	.+8      	; 0x920 <uart_init+0x1e>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	80 93 c0 00 	sts	0x00C0, r24
   		baudrate &= ~0x8000;
     91e:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     920:	30 93 c5 00 	sts	0x00C5, r19
    UBRR0L = (unsigned char) baudrate;
     924:	20 93 c4 00 	sts	0x00C4, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     928:	88 e9       	ldi	r24, 0x98	; 152
     92a:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
     934:	08 95       	ret

00000936 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     936:	90 91 50 01 	lds	r25, 0x0150
     93a:	80 91 51 01 	lds	r24, 0x0151
     93e:	98 17       	cp	r25, r24
     940:	19 f4       	brne	.+6      	; 0x948 <uart_getc+0x12>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	31 e0       	ldi	r19, 0x01	; 1
     946:	12 c0       	rjmp	.+36     	; 0x96c <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     948:	e0 91 51 01 	lds	r30, 0x0151
     94c:	ef 5f       	subi	r30, 0xFF	; 255
     94e:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
     950:	e0 93 51 01 	sts	0x0151, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	e2 5d       	subi	r30, 0xD2	; 210
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
     95c:	20 91 52 01 	lds	r18, 0x0152
     960:	92 2f       	mov	r25, r18
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	ac 01       	movw	r20, r24
     966:	43 0f       	add	r20, r19
     968:	51 1d       	adc	r21, r1
     96a:	9a 01       	movw	r18, r20

}/* uart_getc */
     96c:	c9 01       	movw	r24, r18
     96e:	08 95       	ret

00000970 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     970:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     972:	90 91 4e 01 	lds	r25, 0x014E
     976:	9f 5f       	subi	r25, 0xFF	; 255
     978:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     97a:	80 91 4f 01 	lds	r24, 0x014F
     97e:	98 17       	cp	r25, r24
     980:	e1 f3       	breq	.-8      	; 0x97a <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     982:	e9 2f       	mov	r30, r25
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	e2 5f       	subi	r30, 0xF2	; 242
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
     98c:	90 93 4e 01 	sts	0x014E, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     990:	80 91 c1 00 	lds	r24, 0x00C1
     994:	80 62       	ori	r24, 0x20	; 32
     996:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
     99a:	08 95       	ret

0000099c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
     9a4:	21 96       	adiw	r28, 0x01	; 1
     9a6:	0e 94 b8 04 	call	0x970	; 0x970 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     9aa:	88 81       	ld	r24, Y
     9ac:	88 23       	and	r24, r24
     9ae:	d1 f7       	brne	.-12     	; 0x9a4 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     9be:	0e 94 b8 04 	call	0x970	; 0x970 <uart_putc>
     9c2:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     9c4:	21 96       	adiw	r28, 0x01	; 1
     9c6:	84 91       	lpm	r24, Z+
     9c8:	88 23       	and	r24, r24
     9ca:	c9 f7       	brne	.-14     	; 0x9be <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <vfprintf>:
     9d2:	a1 e1       	ldi	r26, 0x11	; 17
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	ef ee       	ldi	r30, 0xEF	; 239
     9d8:	f4 e0       	ldi	r31, 0x04	; 4
     9da:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__>
     9de:	3c 01       	movw	r6, r24
     9e0:	7f 87       	std	Y+15, r23	; 0x0f
     9e2:	6e 87       	std	Y+14, r22	; 0x0e
     9e4:	6a 01       	movw	r12, r20
     9e6:	fc 01       	movw	r30, r24
     9e8:	17 82       	std	Z+7, r1	; 0x07
     9ea:	16 82       	std	Z+6, r1	; 0x06
     9ec:	83 81       	ldd	r24, Z+3	; 0x03
     9ee:	81 fd       	sbrc	r24, 1
     9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <vfprintf+0x26>
     9f2:	6f ef       	ldi	r22, 0xFF	; 255
     9f4:	7f ef       	ldi	r23, 0xFF	; 255
     9f6:	6f c3       	rjmp	.+1758   	; 0x10d6 <vfprintf+0x704>
     9f8:	9e 01       	movw	r18, r28
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	39 8b       	std	Y+17, r19	; 0x11
     a00:	28 8b       	std	Y+16, r18	; 0x10
     a02:	f3 01       	movw	r30, r6
     a04:	23 81       	ldd	r18, Z+3	; 0x03
     a06:	ee 85       	ldd	r30, Y+14	; 0x0e
     a08:	ff 85       	ldd	r31, Y+15	; 0x0f
     a0a:	23 fd       	sbrc	r18, 3
     a0c:	85 91       	lpm	r24, Z+
     a0e:	23 ff       	sbrs	r18, 3
     a10:	81 91       	ld	r24, Z+
     a12:	ff 87       	std	Y+15, r31	; 0x0f
     a14:	ee 87       	std	Y+14, r30	; 0x0e
     a16:	88 23       	and	r24, r24
     a18:	09 f4       	brne	.+2      	; 0xa1c <vfprintf+0x4a>
     a1a:	5a c3       	rjmp	.+1716   	; 0x10d0 <vfprintf+0x6fe>
     a1c:	85 32       	cpi	r24, 0x25	; 37
     a1e:	51 f4       	brne	.+20     	; 0xa34 <vfprintf+0x62>
     a20:	ee 85       	ldd	r30, Y+14	; 0x0e
     a22:	ff 85       	ldd	r31, Y+15	; 0x0f
     a24:	23 fd       	sbrc	r18, 3
     a26:	85 91       	lpm	r24, Z+
     a28:	23 ff       	sbrs	r18, 3
     a2a:	81 91       	ld	r24, Z+
     a2c:	ff 87       	std	Y+15, r31	; 0x0f
     a2e:	ee 87       	std	Y+14, r30	; 0x0e
     a30:	85 32       	cpi	r24, 0x25	; 37
     a32:	29 f4       	brne	.+10     	; 0xa3e <vfprintf+0x6c>
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	b3 01       	movw	r22, r6
     a38:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     a3c:	e2 cf       	rjmp	.-60     	; 0xa02 <vfprintf+0x30>
     a3e:	98 2f       	mov	r25, r24
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	88 24       	eor	r8, r8
     a44:	99 24       	eor	r9, r9
     a46:	10 32       	cpi	r17, 0x20	; 32
     a48:	b0 f4       	brcc	.+44     	; 0xa76 <vfprintf+0xa4>
     a4a:	9b 32       	cpi	r25, 0x2B	; 43
     a4c:	69 f0       	breq	.+26     	; 0xa68 <vfprintf+0x96>
     a4e:	9c 32       	cpi	r25, 0x2C	; 44
     a50:	28 f4       	brcc	.+10     	; 0xa5c <vfprintf+0x8a>
     a52:	90 32       	cpi	r25, 0x20	; 32
     a54:	51 f0       	breq	.+20     	; 0xa6a <vfprintf+0x98>
     a56:	93 32       	cpi	r25, 0x23	; 35
     a58:	71 f4       	brne	.+28     	; 0xa76 <vfprintf+0xa4>
     a5a:	0b c0       	rjmp	.+22     	; 0xa72 <vfprintf+0xa0>
     a5c:	9d 32       	cpi	r25, 0x2D	; 45
     a5e:	39 f0       	breq	.+14     	; 0xa6e <vfprintf+0x9c>
     a60:	90 33       	cpi	r25, 0x30	; 48
     a62:	49 f4       	brne	.+18     	; 0xa76 <vfprintf+0xa4>
     a64:	11 60       	ori	r17, 0x01	; 1
     a66:	28 c0       	rjmp	.+80     	; 0xab8 <vfprintf+0xe6>
     a68:	12 60       	ori	r17, 0x02	; 2
     a6a:	14 60       	ori	r17, 0x04	; 4
     a6c:	25 c0       	rjmp	.+74     	; 0xab8 <vfprintf+0xe6>
     a6e:	18 60       	ori	r17, 0x08	; 8
     a70:	23 c0       	rjmp	.+70     	; 0xab8 <vfprintf+0xe6>
     a72:	10 61       	ori	r17, 0x10	; 16
     a74:	21 c0       	rjmp	.+66     	; 0xab8 <vfprintf+0xe6>
     a76:	17 fd       	sbrc	r17, 7
     a78:	2a c0       	rjmp	.+84     	; 0xace <vfprintf+0xfc>
     a7a:	89 2f       	mov	r24, r25
     a7c:	80 53       	subi	r24, 0x30	; 48
     a7e:	8a 30       	cpi	r24, 0x0A	; 10
     a80:	78 f4       	brcc	.+30     	; 0xaa0 <vfprintf+0xce>
     a82:	16 ff       	sbrs	r17, 6
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <vfprintf+0xc0>
     a86:	fa e0       	ldi	r31, 0x0A	; 10
     a88:	9f 9e       	mul	r9, r31
     a8a:	90 2c       	mov	r9, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	98 0e       	add	r9, r24
     a90:	13 c0       	rjmp	.+38     	; 0xab8 <vfprintf+0xe6>
     a92:	3a e0       	ldi	r19, 0x0A	; 10
     a94:	83 9e       	mul	r8, r19
     a96:	80 2c       	mov	r8, r0
     a98:	11 24       	eor	r1, r1
     a9a:	88 0e       	add	r8, r24
     a9c:	10 62       	ori	r17, 0x20	; 32
     a9e:	0c c0       	rjmp	.+24     	; 0xab8 <vfprintf+0xe6>
     aa0:	9e 32       	cpi	r25, 0x2E	; 46
     aa2:	21 f4       	brne	.+8      	; 0xaac <vfprintf+0xda>
     aa4:	16 fd       	sbrc	r17, 6
     aa6:	14 c3       	rjmp	.+1576   	; 0x10d0 <vfprintf+0x6fe>
     aa8:	10 64       	ori	r17, 0x40	; 64
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <vfprintf+0xe6>
     aac:	9c 36       	cpi	r25, 0x6C	; 108
     aae:	11 f4       	brne	.+4      	; 0xab4 <vfprintf+0xe2>
     ab0:	10 68       	ori	r17, 0x80	; 128
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0xe6>
     ab4:	98 36       	cpi	r25, 0x68	; 104
     ab6:	59 f4       	brne	.+22     	; 0xace <vfprintf+0xfc>
     ab8:	ee 85       	ldd	r30, Y+14	; 0x0e
     aba:	ff 85       	ldd	r31, Y+15	; 0x0f
     abc:	23 fd       	sbrc	r18, 3
     abe:	95 91       	lpm	r25, Z+
     ac0:	23 ff       	sbrs	r18, 3
     ac2:	91 91       	ld	r25, Z+
     ac4:	ff 87       	std	Y+15, r31	; 0x0f
     ac6:	ee 87       	std	Y+14, r30	; 0x0e
     ac8:	99 23       	and	r25, r25
     aca:	09 f0       	breq	.+2      	; 0xace <vfprintf+0xfc>
     acc:	bc cf       	rjmp	.-136    	; 0xa46 <vfprintf+0x74>
     ace:	89 2f       	mov	r24, r25
     ad0:	85 54       	subi	r24, 0x45	; 69
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	20 f4       	brcc	.+8      	; 0xade <vfprintf+0x10c>
     ad6:	81 2f       	mov	r24, r17
     ad8:	80 61       	ori	r24, 0x10	; 16
     ada:	90 5e       	subi	r25, 0xE0	; 224
     adc:	07 c0       	rjmp	.+14     	; 0xaec <vfprintf+0x11a>
     ade:	89 2f       	mov	r24, r25
     ae0:	85 56       	subi	r24, 0x65	; 101
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <vfprintf+0x116>
     ae6:	9f c1       	rjmp	.+830    	; 0xe26 <vfprintf+0x454>
     ae8:	81 2f       	mov	r24, r17
     aea:	8f 7e       	andi	r24, 0xEF	; 239
     aec:	86 fd       	sbrc	r24, 6
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x122>
     af0:	76 e0       	ldi	r23, 0x06	; 6
     af2:	97 2e       	mov	r9, r23
     af4:	6f e3       	ldi	r22, 0x3F	; 63
     af6:	f6 2e       	mov	r15, r22
     af8:	f8 22       	and	r15, r24
     afa:	95 36       	cpi	r25, 0x65	; 101
     afc:	19 f4       	brne	.+6      	; 0xb04 <vfprintf+0x132>
     afe:	f0 e4       	ldi	r31, 0x40	; 64
     b00:	ff 2a       	or	r15, r31
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <vfprintf+0x140>
     b04:	96 36       	cpi	r25, 0x66	; 102
     b06:	19 f4       	brne	.+6      	; 0xb0e <vfprintf+0x13c>
     b08:	20 e8       	ldi	r18, 0x80	; 128
     b0a:	f2 2a       	or	r15, r18
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0x140>
     b0e:	91 10       	cpse	r9, r1
     b10:	9a 94       	dec	r9
     b12:	f7 fe       	sbrs	r15, 7
     b14:	0a c0       	rjmp	.+20     	; 0xb2a <vfprintf+0x158>
     b16:	3b e3       	ldi	r19, 0x3B	; 59
     b18:	39 15       	cp	r19, r9
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <vfprintf+0x150>
     b1c:	5c e3       	ldi	r21, 0x3C	; 60
     b1e:	b5 2e       	mov	r11, r21
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x154>
     b22:	b9 2c       	mov	r11, r9
     b24:	b3 94       	inc	r11
     b26:	27 e0       	ldi	r18, 0x07	; 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <vfprintf+0x16a>
     b2a:	47 e0       	ldi	r20, 0x07	; 7
     b2c:	49 15       	cp	r20, r9
     b2e:	20 f4       	brcc	.+8      	; 0xb38 <vfprintf+0x166>
     b30:	bb 24       	eor	r11, r11
     b32:	47 e0       	ldi	r20, 0x07	; 7
     b34:	94 2e       	mov	r9, r20
     b36:	f7 cf       	rjmp	.-18     	; 0xb26 <vfprintf+0x154>
     b38:	29 2d       	mov	r18, r9
     b3a:	bb 24       	eor	r11, r11
     b3c:	c6 01       	movw	r24, r12
     b3e:	04 96       	adiw	r24, 0x04	; 4
     b40:	9d 87       	std	Y+13, r25	; 0x0d
     b42:	8c 87       	std	Y+12, r24	; 0x0c
     b44:	f6 01       	movw	r30, r12
     b46:	60 81       	ld	r22, Z
     b48:	71 81       	ldd	r23, Z+1	; 0x01
     b4a:	82 81       	ldd	r24, Z+2	; 0x02
     b4c:	93 81       	ldd	r25, Z+3	; 0x03
     b4e:	ae 01       	movw	r20, r28
     b50:	4f 5f       	subi	r20, 0xFF	; 255
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	0b 2d       	mov	r16, r11
     b56:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__ftoa_engine>
     b5a:	6c 01       	movw	r12, r24
     b5c:	09 81       	ldd	r16, Y+1	; 0x01
     b5e:	20 2e       	mov	r2, r16
     b60:	33 24       	eor	r3, r3
     b62:	00 ff       	sbrs	r16, 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <vfprintf+0x19c>
     b66:	03 fd       	sbrc	r16, 3
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <vfprintf+0x19c>
     b6a:	1d e2       	ldi	r17, 0x2D	; 45
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <vfprintf+0x1ae>
     b6e:	f1 fe       	sbrs	r15, 1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <vfprintf+0x1a4>
     b72:	1b e2       	ldi	r17, 0x2B	; 43
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <vfprintf+0x1ae>
     b76:	f2 fc       	sbrc	r15, 2
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x1ac>
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <vfprintf+0x1ae>
     b7e:	10 e2       	ldi	r17, 0x20	; 32
     b80:	c1 01       	movw	r24, r2
     b82:	8c 70       	andi	r24, 0x0C	; 12
     b84:	90 70       	andi	r25, 0x00	; 0
     b86:	89 2b       	or	r24, r25
     b88:	b9 f1       	breq	.+110    	; 0xbf8 <vfprintf+0x226>
     b8a:	11 23       	and	r17, r17
     b8c:	11 f4       	brne	.+4      	; 0xb92 <vfprintf+0x1c0>
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <vfprintf+0x1c2>
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	88 15       	cp	r24, r8
     b96:	10 f0       	brcs	.+4      	; 0xb9c <vfprintf+0x1ca>
     b98:	88 24       	eor	r8, r8
     b9a:	0a c0       	rjmp	.+20     	; 0xbb0 <vfprintf+0x1de>
     b9c:	88 1a       	sub	r8, r24
     b9e:	f3 fc       	sbrc	r15, 3
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <vfprintf+0x1de>
     ba2:	80 e2       	ldi	r24, 0x20	; 32
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	b3 01       	movw	r22, r6
     ba8:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     bac:	8a 94       	dec	r8
     bae:	c9 f7       	brne	.-14     	; 0xba2 <vfprintf+0x1d0>
     bb0:	11 23       	and	r17, r17
     bb2:	29 f0       	breq	.+10     	; 0xbbe <vfprintf+0x1ec>
     bb4:	81 2f       	mov	r24, r17
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	b3 01       	movw	r22, r6
     bba:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     bbe:	23 fe       	sbrs	r2, 3
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <vfprintf+0x1f6>
     bc2:	01 ed       	ldi	r16, 0xD1	; 209
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <vfprintf+0x212>
     bc8:	05 ed       	ldi	r16, 0xD5	; 213
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	0b c0       	rjmp	.+22     	; 0xbe4 <vfprintf+0x212>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <vfprintf+0x204>
     bd4:	80 52       	subi	r24, 0x20	; 32
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	b3 01       	movw	r22, r6
     bda:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	05 c0       	rjmp	.+10     	; 0xbee <vfprintf+0x21c>
     be4:	ef 2c       	mov	r14, r15
     be6:	ff 24       	eor	r15, r15
     be8:	f0 e1       	ldi	r31, 0x10	; 16
     bea:	ef 22       	and	r14, r31
     bec:	ff 24       	eor	r15, r15
     bee:	f8 01       	movw	r30, r16
     bf0:	84 91       	lpm	r24, Z+
     bf2:	88 23       	and	r24, r24
     bf4:	61 f7       	brne	.-40     	; 0xbce <vfprintf+0x1fc>
     bf6:	14 c1       	rjmp	.+552    	; 0xe20 <vfprintf+0x44e>
     bf8:	f7 fe       	sbrs	r15, 7
     bfa:	12 c0       	rjmp	.+36     	; 0xc20 <vfprintf+0x24e>
     bfc:	bc 0c       	add	r11, r12
     bfe:	24 fe       	sbrs	r2, 4
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <vfprintf+0x238>
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	81 33       	cpi	r24, 0x31	; 49
     c06:	09 f4       	brne	.+2      	; 0xc0a <vfprintf+0x238>
     c08:	ba 94       	dec	r11
     c0a:	1b 14       	cp	r1, r11
     c0c:	1c f0       	brlt	.+6      	; 0xc14 <vfprintf+0x242>
     c0e:	bb 24       	eor	r11, r11
     c10:	b3 94       	inc	r11
     c12:	2d c0       	rjmp	.+90     	; 0xc6e <vfprintf+0x29c>
     c14:	f8 e0       	ldi	r31, 0x08	; 8
     c16:	fb 15       	cp	r31, r11
     c18:	50 f5       	brcc	.+84     	; 0xc6e <vfprintf+0x29c>
     c1a:	38 e0       	ldi	r19, 0x08	; 8
     c1c:	b3 2e       	mov	r11, r19
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <vfprintf+0x29c>
     c20:	f6 fc       	sbrc	r15, 6
     c22:	25 c0       	rjmp	.+74     	; 0xc6e <vfprintf+0x29c>
     c24:	89 2d       	mov	r24, r9
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	8c 15       	cp	r24, r12
     c2a:	9d 05       	cpc	r25, r13
     c2c:	4c f0       	brlt	.+18     	; 0xc40 <vfprintf+0x26e>
     c2e:	2c ef       	ldi	r18, 0xFC	; 252
     c30:	c2 16       	cp	r12, r18
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	d2 06       	cpc	r13, r18
     c36:	24 f0       	brlt	.+8      	; 0xc40 <vfprintf+0x26e>
     c38:	30 e8       	ldi	r19, 0x80	; 128
     c3a:	f3 2a       	or	r15, r19
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <vfprintf+0x26e>
     c3e:	9a 94       	dec	r9
     c40:	99 20       	and	r9, r9
     c42:	49 f0       	breq	.+18     	; 0xc56 <vfprintf+0x284>
     c44:	e2 e0       	ldi	r30, 0x02	; 2
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ec 0f       	add	r30, r28
     c4a:	fd 1f       	adc	r31, r29
     c4c:	e9 0d       	add	r30, r9
     c4e:	f1 1d       	adc	r31, r1
     c50:	80 81       	ld	r24, Z
     c52:	80 33       	cpi	r24, 0x30	; 48
     c54:	a1 f3       	breq	.-24     	; 0xc3e <vfprintf+0x26c>
     c56:	f7 fe       	sbrs	r15, 7
     c58:	0a c0       	rjmp	.+20     	; 0xc6e <vfprintf+0x29c>
     c5a:	b9 2c       	mov	r11, r9
     c5c:	b3 94       	inc	r11
     c5e:	89 2d       	mov	r24, r9
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	c8 16       	cp	r12, r24
     c64:	d9 06       	cpc	r13, r25
     c66:	14 f0       	brlt	.+4      	; 0xc6c <vfprintf+0x29a>
     c68:	99 24       	eor	r9, r9
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <vfprintf+0x29c>
     c6c:	9c 18       	sub	r9, r12
     c6e:	f7 fc       	sbrc	r15, 7
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <vfprintf+0x2a6>
     c72:	25 e0       	ldi	r18, 0x05	; 5
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	09 c0       	rjmp	.+18     	; 0xc8a <vfprintf+0x2b8>
     c78:	1c 14       	cp	r1, r12
     c7a:	1d 04       	cpc	r1, r13
     c7c:	1c f0       	brlt	.+6      	; 0xc84 <vfprintf+0x2b2>
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <vfprintf+0x2b8>
     c84:	96 01       	movw	r18, r12
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	11 23       	and	r17, r17
     c8c:	11 f0       	breq	.+4      	; 0xc92 <vfprintf+0x2c0>
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	99 20       	and	r9, r9
     c94:	29 f0       	breq	.+10     	; 0xca0 <vfprintf+0x2ce>
     c96:	89 2d       	mov	r24, r9
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	28 0f       	add	r18, r24
     c9e:	39 1f       	adc	r19, r25
     ca0:	88 2d       	mov	r24, r8
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	14 f0       	brlt	.+4      	; 0xcae <vfprintf+0x2dc>
     caa:	88 24       	eor	r8, r8
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <vfprintf+0x2de>
     cae:	82 1a       	sub	r8, r18
     cb0:	4f 2c       	mov	r4, r15
     cb2:	55 24       	eor	r5, r5
     cb4:	c2 01       	movw	r24, r4
     cb6:	89 70       	andi	r24, 0x09	; 9
     cb8:	90 70       	andi	r25, 0x00	; 0
     cba:	89 2b       	or	r24, r25
     cbc:	39 f0       	breq	.+14     	; 0xccc <vfprintf+0x2fa>
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <vfprintf+0x2fe>
     cc0:	80 e2       	ldi	r24, 0x20	; 32
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	b3 01       	movw	r22, r6
     cc6:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     cca:	8a 94       	dec	r8
     ccc:	88 20       	and	r8, r8
     cce:	c1 f7       	brne	.-16     	; 0xcc0 <vfprintf+0x2ee>
     cd0:	11 23       	and	r17, r17
     cd2:	29 f0       	breq	.+10     	; 0xcde <vfprintf+0x30c>
     cd4:	81 2f       	mov	r24, r17
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	b3 01       	movw	r22, r6
     cda:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     cde:	43 fe       	sbrs	r4, 3
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <vfprintf+0x31e>
     ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <vfprintf+0x322>
     ce4:	80 e3       	ldi	r24, 0x30	; 48
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	b3 01       	movw	r22, r6
     cea:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     cee:	8a 94       	dec	r8
     cf0:	88 20       	and	r8, r8
     cf2:	c1 f7       	brne	.-16     	; 0xce4 <vfprintf+0x312>
     cf4:	f7 fe       	sbrs	r15, 7
     cf6:	46 c0       	rjmp	.+140    	; 0xd84 <vfprintf+0x3b2>
     cf8:	86 01       	movw	r16, r12
     cfa:	d7 fe       	sbrs	r13, 7
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <vfprintf+0x330>
     cfe:	00 e0       	ldi	r16, 0x00	; 0
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	76 01       	movw	r14, r12
     d04:	08 94       	sec
     d06:	e1 1c       	adc	r14, r1
     d08:	f1 1c       	adc	r15, r1
     d0a:	e0 1a       	sub	r14, r16
     d0c:	f1 0a       	sbc	r15, r17
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	4c 0f       	add	r20, r28
     d14:	5d 1f       	adc	r21, r29
     d16:	e4 0e       	add	r14, r20
     d18:	f5 1e       	adc	r15, r21
     d1a:	26 01       	movw	r4, r12
     d1c:	4b 18       	sub	r4, r11
     d1e:	51 08       	sbc	r5, r1
     d20:	89 2d       	mov	r24, r9
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	aa 24       	eor	r10, r10
     d26:	bb 24       	eor	r11, r11
     d28:	a8 1a       	sub	r10, r24
     d2a:	b9 0a       	sbc	r11, r25
     d2c:	5f ef       	ldi	r21, 0xFF	; 255
     d2e:	0f 3f       	cpi	r16, 0xFF	; 255
     d30:	15 07       	cpc	r17, r21
     d32:	29 f4       	brne	.+10     	; 0xd3e <vfprintf+0x36c>
     d34:	8e e2       	ldi	r24, 0x2E	; 46
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	b3 01       	movw	r22, r6
     d3a:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     d3e:	c0 16       	cp	r12, r16
     d40:	d1 06       	cpc	r13, r17
     d42:	34 f0       	brlt	.+12     	; 0xd50 <vfprintf+0x37e>
     d44:	40 16       	cp	r4, r16
     d46:	51 06       	cpc	r5, r17
     d48:	1c f4       	brge	.+6      	; 0xd50 <vfprintf+0x37e>
     d4a:	f7 01       	movw	r30, r14
     d4c:	80 81       	ld	r24, Z
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <vfprintf+0x380>
     d50:	80 e3       	ldi	r24, 0x30	; 48
     d52:	01 50       	subi	r16, 0x01	; 1
     d54:	10 40       	sbci	r17, 0x00	; 0
     d56:	08 94       	sec
     d58:	e1 1c       	adc	r14, r1
     d5a:	f1 1c       	adc	r15, r1
     d5c:	0a 15       	cp	r16, r10
     d5e:	1b 05       	cpc	r17, r11
     d60:	2c f0       	brlt	.+10     	; 0xd6c <vfprintf+0x39a>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	b3 01       	movw	r22, r6
     d66:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     d6a:	e0 cf       	rjmp	.-64     	; 0xd2c <vfprintf+0x35a>
     d6c:	0c 15       	cp	r16, r12
     d6e:	1d 05       	cpc	r17, r13
     d70:	39 f4       	brne	.+14     	; 0xd80 <vfprintf+0x3ae>
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	96 33       	cpi	r25, 0x36	; 54
     d76:	18 f4       	brcc	.+6      	; 0xd7e <vfprintf+0x3ac>
     d78:	95 33       	cpi	r25, 0x35	; 53
     d7a:	11 f4       	brne	.+4      	; 0xd80 <vfprintf+0x3ae>
     d7c:	24 fe       	sbrs	r2, 4
     d7e:	81 e3       	ldi	r24, 0x31	; 49
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	4b c0       	rjmp	.+150    	; 0xe1a <vfprintf+0x448>
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	81 33       	cpi	r24, 0x31	; 49
     d88:	09 f0       	breq	.+2      	; 0xd8c <vfprintf+0x3ba>
     d8a:	0f 7e       	andi	r16, 0xEF	; 239
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	b3 01       	movw	r22, r6
     d90:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     d94:	99 20       	and	r9, r9
     d96:	a1 f0       	breq	.+40     	; 0xdc0 <vfprintf+0x3ee>
     d98:	8e e2       	ldi	r24, 0x2E	; 46
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	b3 01       	movw	r22, r6
     d9e:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     da2:	12 e0       	ldi	r17, 0x02	; 2
     da4:	e1 e0       	ldi	r30, 0x01	; 1
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	ec 0f       	add	r30, r28
     daa:	fd 1f       	adc	r31, r29
     dac:	e1 0f       	add	r30, r17
     dae:	f1 1d       	adc	r31, r1
     db0:	1f 5f       	subi	r17, 0xFF	; 255
     db2:	80 81       	ld	r24, Z
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	b3 01       	movw	r22, r6
     db8:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     dbc:	9a 94       	dec	r9
     dbe:	91 f7       	brne	.-28     	; 0xda4 <vfprintf+0x3d2>
     dc0:	44 fc       	sbrc	r4, 4
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <vfprintf+0x3f8>
     dc4:	85 e6       	ldi	r24, 0x65	; 101
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0x3fc>
     dca:	85 e4       	ldi	r24, 0x45	; 69
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	b3 01       	movw	r22, r6
     dd0:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     dd4:	d7 fc       	sbrc	r13, 7
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <vfprintf+0x410>
     dd8:	c1 14       	cp	r12, r1
     dda:	d1 04       	cpc	r13, r1
     ddc:	41 f4       	brne	.+16     	; 0xdee <vfprintf+0x41c>
     dde:	04 ff       	sbrs	r16, 4
     de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0x41c>
     de2:	d0 94       	com	r13
     de4:	c1 94       	neg	r12
     de6:	d1 08       	sbc	r13, r1
     de8:	d3 94       	inc	r13
     dea:	8d e2       	ldi	r24, 0x2D	; 45
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <vfprintf+0x41e>
     dee:	8b e2       	ldi	r24, 0x2B	; 43
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	b3 01       	movw	r22, r6
     df4:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     df8:	80 e3       	ldi	r24, 0x30	; 48
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <vfprintf+0x434>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	26 ef       	ldi	r18, 0xF6	; 246
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	c2 0e       	add	r12, r18
     e04:	d3 1e       	adc	r13, r19
     e06:	3a e0       	ldi	r19, 0x0A	; 10
     e08:	c3 16       	cp	r12, r19
     e0a:	d1 04       	cpc	r13, r1
     e0c:	bc f7       	brge	.-18     	; 0xdfc <vfprintf+0x42a>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	b3 01       	movw	r22, r6
     e12:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     e16:	c6 01       	movw	r24, r12
     e18:	c0 96       	adiw	r24, 0x30	; 48
     e1a:	b3 01       	movw	r22, r6
     e1c:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     e20:	cc 84       	ldd	r12, Y+12	; 0x0c
     e22:	dd 84       	ldd	r13, Y+13	; 0x0d
     e24:	52 c1       	rjmp	.+676    	; 0x10ca <vfprintf+0x6f8>
     e26:	93 36       	cpi	r25, 0x63	; 99
     e28:	31 f0       	breq	.+12     	; 0xe36 <vfprintf+0x464>
     e2a:	93 37       	cpi	r25, 0x73	; 115
     e2c:	99 f0       	breq	.+38     	; 0xe54 <vfprintf+0x482>
     e2e:	93 35       	cpi	r25, 0x53	; 83
     e30:	09 f0       	breq	.+2      	; 0xe34 <vfprintf+0x462>
     e32:	59 c0       	rjmp	.+178    	; 0xee6 <vfprintf+0x514>
     e34:	23 c0       	rjmp	.+70     	; 0xe7c <vfprintf+0x4aa>
     e36:	f6 01       	movw	r30, r12
     e38:	80 81       	ld	r24, Z
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	5e 01       	movw	r10, r28
     e3e:	08 94       	sec
     e40:	a1 1c       	adc	r10, r1
     e42:	b1 1c       	adc	r11, r1
     e44:	22 e0       	ldi	r18, 0x02	; 2
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	c2 0e       	add	r12, r18
     e4a:	d3 1e       	adc	r13, r19
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	e2 2e       	mov	r14, r18
     e50:	f1 2c       	mov	r15, r1
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <vfprintf+0x4a6>
     e54:	f6 01       	movw	r30, r12
     e56:	a0 80       	ld	r10, Z
     e58:	b1 80       	ldd	r11, Z+1	; 0x01
     e5a:	16 fd       	sbrc	r17, 6
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <vfprintf+0x492>
     e5e:	6f ef       	ldi	r22, 0xFF	; 255
     e60:	7f ef       	ldi	r23, 0xFF	; 255
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x496>
     e64:	69 2d       	mov	r22, r9
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	22 e0       	ldi	r18, 0x02	; 2
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	c2 0e       	add	r12, r18
     e6e:	d3 1e       	adc	r13, r19
     e70:	c5 01       	movw	r24, r10
     e72:	0e 94 48 0b 	call	0x1690	; 0x1690 <strnlen>
     e76:	7c 01       	movw	r14, r24
     e78:	1f 77       	andi	r17, 0x7F	; 127
     e7a:	13 c0       	rjmp	.+38     	; 0xea2 <vfprintf+0x4d0>
     e7c:	f6 01       	movw	r30, r12
     e7e:	a0 80       	ld	r10, Z
     e80:	b1 80       	ldd	r11, Z+1	; 0x01
     e82:	16 fd       	sbrc	r17, 6
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <vfprintf+0x4ba>
     e86:	6f ef       	ldi	r22, 0xFF	; 255
     e88:	7f ef       	ldi	r23, 0xFF	; 255
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <vfprintf+0x4be>
     e8c:	69 2d       	mov	r22, r9
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	22 e0       	ldi	r18, 0x02	; 2
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	c2 0e       	add	r12, r18
     e96:	d3 1e       	adc	r13, r19
     e98:	c5 01       	movw	r24, r10
     e9a:	0e 94 3d 0b 	call	0x167a	; 0x167a <strnlen_P>
     e9e:	7c 01       	movw	r14, r24
     ea0:	10 68       	ori	r17, 0x80	; 128
     ea2:	13 ff       	sbrs	r17, 3
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <vfprintf+0x4e2>
     ea6:	1b c0       	rjmp	.+54     	; 0xede <vfprintf+0x50c>
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	b3 01       	movw	r22, r6
     eae:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     eb2:	8a 94       	dec	r8
     eb4:	88 2d       	mov	r24, r8
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	e8 16       	cp	r14, r24
     eba:	f9 06       	cpc	r15, r25
     ebc:	a8 f3       	brcs	.-22     	; 0xea8 <vfprintf+0x4d6>
     ebe:	0f c0       	rjmp	.+30     	; 0xede <vfprintf+0x50c>
     ec0:	f5 01       	movw	r30, r10
     ec2:	17 fd       	sbrc	r17, 7
     ec4:	85 91       	lpm	r24, Z+
     ec6:	17 ff       	sbrs	r17, 7
     ec8:	81 91       	ld	r24, Z+
     eca:	5f 01       	movw	r10, r30
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	b3 01       	movw	r22, r6
     ed0:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
     ed4:	81 10       	cpse	r8, r1
     ed6:	8a 94       	dec	r8
     ed8:	08 94       	sec
     eda:	e1 08       	sbc	r14, r1
     edc:	f1 08       	sbc	r15, r1
     ede:	e1 14       	cp	r14, r1
     ee0:	f1 04       	cpc	r15, r1
     ee2:	71 f7       	brne	.-36     	; 0xec0 <vfprintf+0x4ee>
     ee4:	f2 c0       	rjmp	.+484    	; 0x10ca <vfprintf+0x6f8>
     ee6:	94 36       	cpi	r25, 0x64	; 100
     ee8:	11 f0       	breq	.+4      	; 0xeee <vfprintf+0x51c>
     eea:	99 36       	cpi	r25, 0x69	; 105
     eec:	89 f5       	brne	.+98     	; 0xf50 <vfprintf+0x57e>
     eee:	17 ff       	sbrs	r17, 7
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <vfprintf+0x530>
     ef2:	f6 01       	movw	r30, r12
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	42 81       	ldd	r20, Z+2	; 0x02
     efa:	53 81       	ldd	r21, Z+3	; 0x03
     efc:	84 e0       	ldi	r24, 0x04	; 4
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0a c0       	rjmp	.+20     	; 0xf16 <vfprintf+0x544>
     f02:	f6 01       	movw	r30, r12
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	9c 01       	movw	r18, r24
     f0a:	44 27       	eor	r20, r20
     f0c:	37 fd       	sbrc	r19, 7
     f0e:	40 95       	com	r20
     f10:	54 2f       	mov	r21, r20
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	c8 0e       	add	r12, r24
     f18:	d9 1e       	adc	r13, r25
     f1a:	9f e6       	ldi	r25, 0x6F	; 111
     f1c:	f9 2e       	mov	r15, r25
     f1e:	f1 22       	and	r15, r17
     f20:	57 ff       	sbrs	r21, 7
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <vfprintf+0x564>
     f24:	50 95       	com	r21
     f26:	40 95       	com	r20
     f28:	30 95       	com	r19
     f2a:	21 95       	neg	r18
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	4f 4f       	sbci	r20, 0xFF	; 255
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	90 e8       	ldi	r25, 0x80	; 128
     f34:	f9 2a       	or	r15, r25
     f36:	ca 01       	movw	r24, r20
     f38:	b9 01       	movw	r22, r18
     f3a:	ae 01       	movw	r20, r28
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	2a e0       	ldi	r18, 0x0A	; 10
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	0e 94 bd 0b 	call	0x177a	; 0x177a <__ultoa_invert>
     f48:	e8 2e       	mov	r14, r24
     f4a:	e8 89       	ldd	r30, Y+16	; 0x10
     f4c:	ee 1a       	sub	r14, r30
     f4e:	41 c0       	rjmp	.+130    	; 0xfd2 <vfprintf+0x600>
     f50:	95 37       	cpi	r25, 0x75	; 117
     f52:	21 f4       	brne	.+8      	; 0xf5c <vfprintf+0x58a>
     f54:	1f 7e       	andi	r17, 0xEF	; 239
     f56:	2a e0       	ldi	r18, 0x0A	; 10
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	1c c0       	rjmp	.+56     	; 0xf94 <vfprintf+0x5c2>
     f5c:	19 7f       	andi	r17, 0xF9	; 249
     f5e:	9f 36       	cpi	r25, 0x6F	; 111
     f60:	61 f0       	breq	.+24     	; 0xf7a <vfprintf+0x5a8>
     f62:	90 37       	cpi	r25, 0x70	; 112
     f64:	20 f4       	brcc	.+8      	; 0xf6e <vfprintf+0x59c>
     f66:	98 35       	cpi	r25, 0x58	; 88
     f68:	09 f0       	breq	.+2      	; 0xf6c <vfprintf+0x59a>
     f6a:	b2 c0       	rjmp	.+356    	; 0x10d0 <vfprintf+0x6fe>
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <vfprintf+0x5ba>
     f6e:	90 37       	cpi	r25, 0x70	; 112
     f70:	39 f0       	breq	.+14     	; 0xf80 <vfprintf+0x5ae>
     f72:	98 37       	cpi	r25, 0x78	; 120
     f74:	09 f0       	breq	.+2      	; 0xf78 <vfprintf+0x5a6>
     f76:	ac c0       	rjmp	.+344    	; 0x10d0 <vfprintf+0x6fe>
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <vfprintf+0x5b0>
     f7a:	28 e0       	ldi	r18, 0x08	; 8
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	0a c0       	rjmp	.+20     	; 0xf94 <vfprintf+0x5c2>
     f80:	10 61       	ori	r17, 0x10	; 16
     f82:	14 fd       	sbrc	r17, 4
     f84:	14 60       	ori	r17, 0x04	; 4
     f86:	20 e1       	ldi	r18, 0x10	; 16
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <vfprintf+0x5c2>
     f8c:	14 fd       	sbrc	r17, 4
     f8e:	16 60       	ori	r17, 0x06	; 6
     f90:	20 e1       	ldi	r18, 0x10	; 16
     f92:	32 e0       	ldi	r19, 0x02	; 2
     f94:	17 ff       	sbrs	r17, 7
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <vfprintf+0x5d6>
     f98:	f6 01       	movw	r30, r12
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	44 e0       	ldi	r20, 0x04	; 4
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <vfprintf+0x5e6>
     fa8:	f6 01       	movw	r30, r12
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	bc 01       	movw	r22, r24
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	42 e0       	ldi	r20, 0x02	; 2
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	c4 0e       	add	r12, r20
     fba:	d5 1e       	adc	r13, r21
     fbc:	ae 01       	movw	r20, r28
     fbe:	4f 5f       	subi	r20, 0xFF	; 255
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
     fc2:	0e 94 bd 0b 	call	0x177a	; 0x177a <__ultoa_invert>
     fc6:	e8 2e       	mov	r14, r24
     fc8:	58 89       	ldd	r21, Y+16	; 0x10
     fca:	e5 1a       	sub	r14, r21
     fcc:	8f e7       	ldi	r24, 0x7F	; 127
     fce:	f8 2e       	mov	r15, r24
     fd0:	f1 22       	and	r15, r17
     fd2:	f6 fe       	sbrs	r15, 6
     fd4:	0b c0       	rjmp	.+22     	; 0xfec <vfprintf+0x61a>
     fd6:	8e ef       	ldi	r24, 0xFE	; 254
     fd8:	f8 22       	and	r15, r24
     fda:	e9 14       	cp	r14, r9
     fdc:	38 f4       	brcc	.+14     	; 0xfec <vfprintf+0x61a>
     fde:	f4 fe       	sbrs	r15, 4
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <vfprintf+0x61e>
     fe2:	f2 fc       	sbrc	r15, 2
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <vfprintf+0x61e>
     fe6:	9f ee       	ldi	r25, 0xEF	; 239
     fe8:	f9 22       	and	r15, r25
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x61e>
     fec:	1e 2d       	mov	r17, r14
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <vfprintf+0x620>
     ff0:	19 2d       	mov	r17, r9
     ff2:	f4 fe       	sbrs	r15, 4
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <vfprintf+0x63e>
     ff6:	fe 01       	movw	r30, r28
     ff8:	ee 0d       	add	r30, r14
     ffa:	f1 1d       	adc	r31, r1
     ffc:	80 81       	ld	r24, Z
     ffe:	80 33       	cpi	r24, 0x30	; 48
    1000:	19 f4       	brne	.+6      	; 0x1008 <vfprintf+0x636>
    1002:	e9 ee       	ldi	r30, 0xE9	; 233
    1004:	fe 22       	and	r15, r30
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <vfprintf+0x646>
    1008:	1f 5f       	subi	r17, 0xFF	; 255
    100a:	f2 fe       	sbrs	r15, 2
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <vfprintf+0x646>
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <vfprintf+0x644>
    1010:	8f 2d       	mov	r24, r15
    1012:	86 78       	andi	r24, 0x86	; 134
    1014:	09 f0       	breq	.+2      	; 0x1018 <vfprintf+0x646>
    1016:	1f 5f       	subi	r17, 0xFF	; 255
    1018:	0f 2d       	mov	r16, r15
    101a:	f3 fc       	sbrc	r15, 3
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <vfprintf+0x674>
    101e:	f0 fe       	sbrs	r15, 0
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <vfprintf+0x66e>
    1022:	18 15       	cp	r17, r8
    1024:	10 f0       	brcs	.+4      	; 0x102a <vfprintf+0x658>
    1026:	9e 2c       	mov	r9, r14
    1028:	0b c0       	rjmp	.+22     	; 0x1040 <vfprintf+0x66e>
    102a:	9e 2c       	mov	r9, r14
    102c:	98 0c       	add	r9, r8
    102e:	91 1a       	sub	r9, r17
    1030:	18 2d       	mov	r17, r8
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <vfprintf+0x66e>
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	b3 01       	movw	r22, r6
    103a:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
    103e:	1f 5f       	subi	r17, 0xFF	; 255
    1040:	18 15       	cp	r17, r8
    1042:	c0 f3       	brcs	.-16     	; 0x1034 <vfprintf+0x662>
    1044:	04 c0       	rjmp	.+8      	; 0x104e <vfprintf+0x67c>
    1046:	18 15       	cp	r17, r8
    1048:	10 f4       	brcc	.+4      	; 0x104e <vfprintf+0x67c>
    104a:	81 1a       	sub	r8, r17
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <vfprintf+0x67e>
    104e:	88 24       	eor	r8, r8
    1050:	04 ff       	sbrs	r16, 4
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <vfprintf+0x6a0>
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	b3 01       	movw	r22, r6
    105a:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
    105e:	02 ff       	sbrs	r16, 2
    1060:	1d c0       	rjmp	.+58     	; 0x109c <vfprintf+0x6ca>
    1062:	01 fd       	sbrc	r16, 1
    1064:	03 c0       	rjmp	.+6      	; 0x106c <vfprintf+0x69a>
    1066:	88 e7       	ldi	r24, 0x78	; 120
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <vfprintf+0x6b6>
    106c:	88 e5       	ldi	r24, 0x58	; 88
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <vfprintf+0x6b6>
    1072:	80 2f       	mov	r24, r16
    1074:	86 78       	andi	r24, 0x86	; 134
    1076:	91 f0       	breq	.+36     	; 0x109c <vfprintf+0x6ca>
    1078:	01 ff       	sbrs	r16, 1
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <vfprintf+0x6ae>
    107c:	8b e2       	ldi	r24, 0x2B	; 43
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <vfprintf+0x6b0>
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	f7 fc       	sbrc	r15, 7
    1084:	8d e2       	ldi	r24, 0x2D	; 45
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	b3 01       	movw	r22, r6
    108a:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
    108e:	06 c0       	rjmp	.+12     	; 0x109c <vfprintf+0x6ca>
    1090:	80 e3       	ldi	r24, 0x30	; 48
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	b3 01       	movw	r22, r6
    1096:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
    109a:	9a 94       	dec	r9
    109c:	e9 14       	cp	r14, r9
    109e:	c0 f3       	brcs	.-16     	; 0x1090 <vfprintf+0x6be>
    10a0:	ea 94       	dec	r14
    10a2:	e1 e0       	ldi	r30, 0x01	; 1
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	ec 0f       	add	r30, r28
    10a8:	fd 1f       	adc	r31, r29
    10aa:	ee 0d       	add	r30, r14
    10ac:	f1 1d       	adc	r31, r1
    10ae:	80 81       	ld	r24, Z
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	b3 01       	movw	r22, r6
    10b4:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
    10b8:	ee 20       	and	r14, r14
    10ba:	91 f7       	brne	.-28     	; 0x10a0 <vfprintf+0x6ce>
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <vfprintf+0x6f8>
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b3 01       	movw	r22, r6
    10c4:	0e 94 91 0b 	call	0x1722	; 0x1722 <fputc>
    10c8:	8a 94       	dec	r8
    10ca:	88 20       	and	r8, r8
    10cc:	c1 f7       	brne	.-16     	; 0x10be <vfprintf+0x6ec>
    10ce:	99 cc       	rjmp	.-1742   	; 0xa02 <vfprintf+0x30>
    10d0:	f3 01       	movw	r30, r6
    10d2:	66 81       	ldd	r22, Z+6	; 0x06
    10d4:	77 81       	ldd	r23, Z+7	; 0x07
    10d6:	cb 01       	movw	r24, r22
    10d8:	61 96       	adiw	r28, 0x11	; 17
    10da:	e2 e1       	ldi	r30, 0x12	; 18
    10dc:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__>

000010e0 <__subsf3>:
    10e0:	50 58       	subi	r21, 0x80	; 128

000010e2 <__addsf3>:
    10e2:	bb 27       	eor	r27, r27
    10e4:	aa 27       	eor	r26, r26
    10e6:	0e d0       	rcall	.+28     	; 0x1104 <__addsf3x>
    10e8:	1c c1       	rjmp	.+568    	; 0x1322 <__fp_round>
    10ea:	0d d1       	rcall	.+538    	; 0x1306 <__fp_pscA>
    10ec:	30 f0       	brcs	.+12     	; 0x10fa <__addsf3+0x18>
    10ee:	12 d1       	rcall	.+548    	; 0x1314 <__fp_pscB>
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <__addsf3+0x18>
    10f2:	31 f4       	brne	.+12     	; 0x1100 <__stack+0x1>
    10f4:	9f 3f       	cpi	r25, 0xFF	; 255
    10f6:	11 f4       	brne	.+4      	; 0x10fc <__addsf3+0x1a>
    10f8:	1e f4       	brtc	.+6      	; 0x1100 <__stack+0x1>
    10fa:	02 c1       	rjmp	.+516    	; 0x1300 <__fp_nan>
    10fc:	0e f4       	brtc	.+2      	; 0x1100 <__stack+0x1>
    10fe:	e0 95       	com	r30
    1100:	e7 fb       	bst	r30, 7
    1102:	f8 c0       	rjmp	.+496    	; 0x12f4 <__fp_inf>

00001104 <__addsf3x>:
    1104:	e9 2f       	mov	r30, r25
    1106:	1e d1       	rcall	.+572    	; 0x1344 <__fp_split3>
    1108:	80 f3       	brcs	.-32     	; 0x10ea <__addsf3+0x8>
    110a:	ba 17       	cp	r27, r26
    110c:	62 07       	cpc	r22, r18
    110e:	73 07       	cpc	r23, r19
    1110:	84 07       	cpc	r24, r20
    1112:	95 07       	cpc	r25, r21
    1114:	18 f0       	brcs	.+6      	; 0x111c <__addsf3x+0x18>
    1116:	71 f4       	brne	.+28     	; 0x1134 <__addsf3x+0x30>
    1118:	9e f5       	brtc	.+102    	; 0x1180 <__addsf3x+0x7c>
    111a:	36 c1       	rjmp	.+620    	; 0x1388 <__fp_zero>
    111c:	0e f4       	brtc	.+2      	; 0x1120 <__addsf3x+0x1c>
    111e:	e0 95       	com	r30
    1120:	0b 2e       	mov	r0, r27
    1122:	ba 2f       	mov	r27, r26
    1124:	a0 2d       	mov	r26, r0
    1126:	0b 01       	movw	r0, r22
    1128:	b9 01       	movw	r22, r18
    112a:	90 01       	movw	r18, r0
    112c:	0c 01       	movw	r0, r24
    112e:	ca 01       	movw	r24, r20
    1130:	a0 01       	movw	r20, r0
    1132:	11 24       	eor	r1, r1
    1134:	ff 27       	eor	r31, r31
    1136:	59 1b       	sub	r21, r25
    1138:	99 f0       	breq	.+38     	; 0x1160 <__addsf3x+0x5c>
    113a:	59 3f       	cpi	r21, 0xF9	; 249
    113c:	50 f4       	brcc	.+20     	; 0x1152 <__addsf3x+0x4e>
    113e:	50 3e       	cpi	r21, 0xE0	; 224
    1140:	68 f1       	brcs	.+90     	; 0x119c <__addsf3x+0x98>
    1142:	1a 16       	cp	r1, r26
    1144:	f0 40       	sbci	r31, 0x00	; 0
    1146:	a2 2f       	mov	r26, r18
    1148:	23 2f       	mov	r18, r19
    114a:	34 2f       	mov	r19, r20
    114c:	44 27       	eor	r20, r20
    114e:	58 5f       	subi	r21, 0xF8	; 248
    1150:	f3 cf       	rjmp	.-26     	; 0x1138 <__addsf3x+0x34>
    1152:	46 95       	lsr	r20
    1154:	37 95       	ror	r19
    1156:	27 95       	ror	r18
    1158:	a7 95       	ror	r26
    115a:	f0 40       	sbci	r31, 0x00	; 0
    115c:	53 95       	inc	r21
    115e:	c9 f7       	brne	.-14     	; 0x1152 <__addsf3x+0x4e>
    1160:	7e f4       	brtc	.+30     	; 0x1180 <__addsf3x+0x7c>
    1162:	1f 16       	cp	r1, r31
    1164:	ba 0b       	sbc	r27, r26
    1166:	62 0b       	sbc	r22, r18
    1168:	73 0b       	sbc	r23, r19
    116a:	84 0b       	sbc	r24, r20
    116c:	ba f0       	brmi	.+46     	; 0x119c <__addsf3x+0x98>
    116e:	91 50       	subi	r25, 0x01	; 1
    1170:	a1 f0       	breq	.+40     	; 0x119a <__addsf3x+0x96>
    1172:	ff 0f       	add	r31, r31
    1174:	bb 1f       	adc	r27, r27
    1176:	66 1f       	adc	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	c2 f7       	brpl	.-16     	; 0x116e <__addsf3x+0x6a>
    117e:	0e c0       	rjmp	.+28     	; 0x119c <__addsf3x+0x98>
    1180:	ba 0f       	add	r27, r26
    1182:	62 1f       	adc	r22, r18
    1184:	73 1f       	adc	r23, r19
    1186:	84 1f       	adc	r24, r20
    1188:	48 f4       	brcc	.+18     	; 0x119c <__addsf3x+0x98>
    118a:	87 95       	ror	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	b7 95       	ror	r27
    1192:	f7 95       	ror	r31
    1194:	9e 3f       	cpi	r25, 0xFE	; 254
    1196:	08 f0       	brcs	.+2      	; 0x119a <__addsf3x+0x96>
    1198:	b3 cf       	rjmp	.-154    	; 0x1100 <__stack+0x1>
    119a:	93 95       	inc	r25
    119c:	88 0f       	add	r24, r24
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <__addsf3x+0x9e>
    11a0:	99 27       	eor	r25, r25
    11a2:	ee 0f       	add	r30, r30
    11a4:	97 95       	ror	r25
    11a6:	87 95       	ror	r24
    11a8:	08 95       	ret

000011aa <__divsf3>:
    11aa:	0c d0       	rcall	.+24     	; 0x11c4 <__divsf3x>
    11ac:	ba c0       	rjmp	.+372    	; 0x1322 <__fp_round>
    11ae:	b2 d0       	rcall	.+356    	; 0x1314 <__fp_pscB>
    11b0:	40 f0       	brcs	.+16     	; 0x11c2 <__divsf3+0x18>
    11b2:	a9 d0       	rcall	.+338    	; 0x1306 <__fp_pscA>
    11b4:	30 f0       	brcs	.+12     	; 0x11c2 <__divsf3+0x18>
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <__divsf3+0x16>
    11b8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <__divsf3+0x18>
    11bc:	9b c0       	rjmp	.+310    	; 0x12f4 <__fp_inf>
    11be:	51 11       	cpse	r21, r1
    11c0:	e4 c0       	rjmp	.+456    	; 0x138a <__fp_szero>
    11c2:	9e c0       	rjmp	.+316    	; 0x1300 <__fp_nan>

000011c4 <__divsf3x>:
    11c4:	bf d0       	rcall	.+382    	; 0x1344 <__fp_split3>
    11c6:	98 f3       	brcs	.-26     	; 0x11ae <__divsf3+0x4>

000011c8 <__divsf3_pse>:
    11c8:	99 23       	and	r25, r25
    11ca:	c9 f3       	breq	.-14     	; 0x11be <__divsf3+0x14>
    11cc:	55 23       	and	r21, r21
    11ce:	b1 f3       	breq	.-20     	; 0x11bc <__divsf3+0x12>
    11d0:	95 1b       	sub	r25, r21
    11d2:	55 0b       	sbc	r21, r21
    11d4:	bb 27       	eor	r27, r27
    11d6:	aa 27       	eor	r26, r26
    11d8:	62 17       	cp	r22, r18
    11da:	73 07       	cpc	r23, r19
    11dc:	84 07       	cpc	r24, r20
    11de:	38 f0       	brcs	.+14     	; 0x11ee <__divsf3_pse+0x26>
    11e0:	9f 5f       	subi	r25, 0xFF	; 255
    11e2:	5f 4f       	sbci	r21, 0xFF	; 255
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	44 1f       	adc	r20, r20
    11ea:	aa 1f       	adc	r26, r26
    11ec:	a9 f3       	breq	.-22     	; 0x11d8 <__divsf3_pse+0x10>
    11ee:	33 d0       	rcall	.+102    	; 0x1256 <__divsf3_pse+0x8e>
    11f0:	0e 2e       	mov	r0, r30
    11f2:	3a f0       	brmi	.+14     	; 0x1202 <__divsf3_pse+0x3a>
    11f4:	e0 e8       	ldi	r30, 0x80	; 128
    11f6:	30 d0       	rcall	.+96     	; 0x1258 <__divsf3_pse+0x90>
    11f8:	91 50       	subi	r25, 0x01	; 1
    11fa:	50 40       	sbci	r21, 0x00	; 0
    11fc:	e6 95       	lsr	r30
    11fe:	00 1c       	adc	r0, r0
    1200:	ca f7       	brpl	.-14     	; 0x11f4 <__divsf3_pse+0x2c>
    1202:	29 d0       	rcall	.+82     	; 0x1256 <__divsf3_pse+0x8e>
    1204:	fe 2f       	mov	r31, r30
    1206:	27 d0       	rcall	.+78     	; 0x1256 <__divsf3_pse+0x8e>
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	bb 1f       	adc	r27, r27
    1210:	26 17       	cp	r18, r22
    1212:	37 07       	cpc	r19, r23
    1214:	48 07       	cpc	r20, r24
    1216:	ab 07       	cpc	r26, r27
    1218:	b0 e8       	ldi	r27, 0x80	; 128
    121a:	09 f0       	breq	.+2      	; 0x121e <__divsf3_pse+0x56>
    121c:	bb 0b       	sbc	r27, r27
    121e:	80 2d       	mov	r24, r0
    1220:	bf 01       	movw	r22, r30
    1222:	ff 27       	eor	r31, r31
    1224:	93 58       	subi	r25, 0x83	; 131
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	2a f0       	brmi	.+10     	; 0x1234 <__divsf3_pse+0x6c>
    122a:	9e 3f       	cpi	r25, 0xFE	; 254
    122c:	51 05       	cpc	r21, r1
    122e:	68 f0       	brcs	.+26     	; 0x124a <__divsf3_pse+0x82>
    1230:	61 c0       	rjmp	.+194    	; 0x12f4 <__fp_inf>
    1232:	ab c0       	rjmp	.+342    	; 0x138a <__fp_szero>
    1234:	5f 3f       	cpi	r21, 0xFF	; 255
    1236:	ec f3       	brlt	.-6      	; 0x1232 <__divsf3_pse+0x6a>
    1238:	98 3e       	cpi	r25, 0xE8	; 232
    123a:	dc f3       	brlt	.-10     	; 0x1232 <__divsf3_pse+0x6a>
    123c:	86 95       	lsr	r24
    123e:	77 95       	ror	r23
    1240:	67 95       	ror	r22
    1242:	b7 95       	ror	r27
    1244:	f7 95       	ror	r31
    1246:	9f 5f       	subi	r25, 0xFF	; 255
    1248:	c9 f7       	brne	.-14     	; 0x123c <__divsf3_pse+0x74>
    124a:	88 0f       	add	r24, r24
    124c:	91 1d       	adc	r25, r1
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	97 f9       	bld	r25, 7
    1254:	08 95       	ret
    1256:	e1 e0       	ldi	r30, 0x01	; 1
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	88 1f       	adc	r24, r24
    125e:	bb 1f       	adc	r27, r27
    1260:	62 17       	cp	r22, r18
    1262:	73 07       	cpc	r23, r19
    1264:	84 07       	cpc	r24, r20
    1266:	ba 07       	cpc	r27, r26
    1268:	20 f0       	brcs	.+8      	; 0x1272 <__divsf3_pse+0xaa>
    126a:	62 1b       	sub	r22, r18
    126c:	73 0b       	sbc	r23, r19
    126e:	84 0b       	sbc	r24, r20
    1270:	ba 0b       	sbc	r27, r26
    1272:	ee 1f       	adc	r30, r30
    1274:	88 f7       	brcc	.-30     	; 0x1258 <__divsf3_pse+0x90>
    1276:	e0 95       	com	r30
    1278:	08 95       	ret

0000127a <__floatunsisf>:
    127a:	e8 94       	clt
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <__floatsisf+0x12>

0000127e <__floatsisf>:
    127e:	97 fb       	bst	r25, 7
    1280:	3e f4       	brtc	.+14     	; 0x1290 <__floatsisf+0x12>
    1282:	90 95       	com	r25
    1284:	80 95       	com	r24
    1286:	70 95       	com	r23
    1288:	61 95       	neg	r22
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	99 23       	and	r25, r25
    1292:	a9 f0       	breq	.+42     	; 0x12be <__floatsisf+0x40>
    1294:	f9 2f       	mov	r31, r25
    1296:	96 e9       	ldi	r25, 0x96	; 150
    1298:	bb 27       	eor	r27, r27
    129a:	93 95       	inc	r25
    129c:	f6 95       	lsr	r31
    129e:	87 95       	ror	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	b7 95       	ror	r27
    12a6:	f1 11       	cpse	r31, r1
    12a8:	f8 cf       	rjmp	.-16     	; 0x129a <__floatsisf+0x1c>
    12aa:	fa f4       	brpl	.+62     	; 0x12ea <__floatsisf+0x6c>
    12ac:	bb 0f       	add	r27, r27
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__floatsisf+0x36>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <__floatsisf+0x6c>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	16 c0       	rjmp	.+44     	; 0x12ea <__floatsisf+0x6c>
    12be:	88 23       	and	r24, r24
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <__floatsisf+0x48>
    12c2:	96 e9       	ldi	r25, 0x96	; 150
    12c4:	11 c0       	rjmp	.+34     	; 0x12e8 <__floatsisf+0x6a>
    12c6:	77 23       	and	r23, r23
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <__floatsisf+0x54>
    12ca:	9e e8       	ldi	r25, 0x8E	; 142
    12cc:	87 2f       	mov	r24, r23
    12ce:	76 2f       	mov	r23, r22
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <__floatsisf+0x5e>
    12d2:	66 23       	and	r22, r22
    12d4:	71 f0       	breq	.+28     	; 0x12f2 <__floatsisf+0x74>
    12d6:	96 e8       	ldi	r25, 0x86	; 134
    12d8:	86 2f       	mov	r24, r22
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	2a f0       	brmi	.+10     	; 0x12ea <__floatsisf+0x6c>
    12e0:	9a 95       	dec	r25
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	da f7       	brpl	.-10     	; 0x12e0 <__floatsisf+0x62>
    12ea:	88 0f       	add	r24, r24
    12ec:	96 95       	lsr	r25
    12ee:	87 95       	ror	r24
    12f0:	97 f9       	bld	r25, 7
    12f2:	08 95       	ret

000012f4 <__fp_inf>:
    12f4:	97 f9       	bld	r25, 7
    12f6:	9f 67       	ori	r25, 0x7F	; 127
    12f8:	80 e8       	ldi	r24, 0x80	; 128
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	08 95       	ret

00001300 <__fp_nan>:
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	80 ec       	ldi	r24, 0xC0	; 192
    1304:	08 95       	ret

00001306 <__fp_pscA>:
    1306:	00 24       	eor	r0, r0
    1308:	0a 94       	dec	r0
    130a:	16 16       	cp	r1, r22
    130c:	17 06       	cpc	r1, r23
    130e:	18 06       	cpc	r1, r24
    1310:	09 06       	cpc	r0, r25
    1312:	08 95       	ret

00001314 <__fp_pscB>:
    1314:	00 24       	eor	r0, r0
    1316:	0a 94       	dec	r0
    1318:	12 16       	cp	r1, r18
    131a:	13 06       	cpc	r1, r19
    131c:	14 06       	cpc	r1, r20
    131e:	05 06       	cpc	r0, r21
    1320:	08 95       	ret

00001322 <__fp_round>:
    1322:	09 2e       	mov	r0, r25
    1324:	03 94       	inc	r0
    1326:	00 0c       	add	r0, r0
    1328:	11 f4       	brne	.+4      	; 0x132e <__fp_round+0xc>
    132a:	88 23       	and	r24, r24
    132c:	52 f0       	brmi	.+20     	; 0x1342 <__fp_round+0x20>
    132e:	bb 0f       	add	r27, r27
    1330:	40 f4       	brcc	.+16     	; 0x1342 <__fp_round+0x20>
    1332:	bf 2b       	or	r27, r31
    1334:	11 f4       	brne	.+4      	; 0x133a <__fp_round+0x18>
    1336:	60 ff       	sbrs	r22, 0
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <__fp_round+0x20>
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	08 95       	ret

00001344 <__fp_split3>:
    1344:	57 fd       	sbrc	r21, 7
    1346:	90 58       	subi	r25, 0x80	; 128
    1348:	44 0f       	add	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	59 f0       	breq	.+22     	; 0x1364 <__fp_splitA+0x10>
    134e:	5f 3f       	cpi	r21, 0xFF	; 255
    1350:	71 f0       	breq	.+28     	; 0x136e <__fp_splitA+0x1a>
    1352:	47 95       	ror	r20

00001354 <__fp_splitA>:
    1354:	88 0f       	add	r24, r24
    1356:	97 fb       	bst	r25, 7
    1358:	99 1f       	adc	r25, r25
    135a:	61 f0       	breq	.+24     	; 0x1374 <__fp_splitA+0x20>
    135c:	9f 3f       	cpi	r25, 0xFF	; 255
    135e:	79 f0       	breq	.+30     	; 0x137e <__fp_splitA+0x2a>
    1360:	87 95       	ror	r24
    1362:	08 95       	ret
    1364:	12 16       	cp	r1, r18
    1366:	13 06       	cpc	r1, r19
    1368:	14 06       	cpc	r1, r20
    136a:	55 1f       	adc	r21, r21
    136c:	f2 cf       	rjmp	.-28     	; 0x1352 <__fp_split3+0xe>
    136e:	46 95       	lsr	r20
    1370:	f1 df       	rcall	.-30     	; 0x1354 <__fp_splitA>
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <__fp_splitA+0x30>
    1374:	16 16       	cp	r1, r22
    1376:	17 06       	cpc	r1, r23
    1378:	18 06       	cpc	r1, r24
    137a:	99 1f       	adc	r25, r25
    137c:	f1 cf       	rjmp	.-30     	; 0x1360 <__fp_splitA+0xc>
    137e:	86 95       	lsr	r24
    1380:	71 05       	cpc	r23, r1
    1382:	61 05       	cpc	r22, r1
    1384:	08 94       	sec
    1386:	08 95       	ret

00001388 <__fp_zero>:
    1388:	e8 94       	clt

0000138a <__fp_szero>:
    138a:	bb 27       	eor	r27, r27
    138c:	66 27       	eor	r22, r22
    138e:	77 27       	eor	r23, r23
    1390:	cb 01       	movw	r24, r22
    1392:	97 f9       	bld	r25, 7
    1394:	08 95       	ret

00001396 <__mulsf3>:
    1396:	0b d0       	rcall	.+22     	; 0x13ae <__mulsf3x>
    1398:	c4 cf       	rjmp	.-120    	; 0x1322 <__fp_round>
    139a:	b5 df       	rcall	.-150    	; 0x1306 <__fp_pscA>
    139c:	28 f0       	brcs	.+10     	; 0x13a8 <__mulsf3+0x12>
    139e:	ba df       	rcall	.-140    	; 0x1314 <__fp_pscB>
    13a0:	18 f0       	brcs	.+6      	; 0x13a8 <__mulsf3+0x12>
    13a2:	95 23       	and	r25, r21
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__mulsf3+0x12>
    13a6:	a6 cf       	rjmp	.-180    	; 0x12f4 <__fp_inf>
    13a8:	ab cf       	rjmp	.-170    	; 0x1300 <__fp_nan>
    13aa:	11 24       	eor	r1, r1
    13ac:	ee cf       	rjmp	.-36     	; 0x138a <__fp_szero>

000013ae <__mulsf3x>:
    13ae:	ca df       	rcall	.-108    	; 0x1344 <__fp_split3>
    13b0:	a0 f3       	brcs	.-24     	; 0x139a <__mulsf3+0x4>

000013b2 <__mulsf3_pse>:
    13b2:	95 9f       	mul	r25, r21
    13b4:	d1 f3       	breq	.-12     	; 0x13aa <__mulsf3+0x14>
    13b6:	95 0f       	add	r25, r21
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	55 1f       	adc	r21, r21
    13bc:	62 9f       	mul	r22, r18
    13be:	f0 01       	movw	r30, r0
    13c0:	72 9f       	mul	r23, r18
    13c2:	bb 27       	eor	r27, r27
    13c4:	f0 0d       	add	r31, r0
    13c6:	b1 1d       	adc	r27, r1
    13c8:	63 9f       	mul	r22, r19
    13ca:	aa 27       	eor	r26, r26
    13cc:	f0 0d       	add	r31, r0
    13ce:	b1 1d       	adc	r27, r1
    13d0:	aa 1f       	adc	r26, r26
    13d2:	64 9f       	mul	r22, r20
    13d4:	66 27       	eor	r22, r22
    13d6:	b0 0d       	add	r27, r0
    13d8:	a1 1d       	adc	r26, r1
    13da:	66 1f       	adc	r22, r22
    13dc:	82 9f       	mul	r24, r18
    13de:	22 27       	eor	r18, r18
    13e0:	b0 0d       	add	r27, r0
    13e2:	a1 1d       	adc	r26, r1
    13e4:	62 1f       	adc	r22, r18
    13e6:	73 9f       	mul	r23, r19
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	62 1f       	adc	r22, r18
    13ee:	83 9f       	mul	r24, r19
    13f0:	a0 0d       	add	r26, r0
    13f2:	61 1d       	adc	r22, r1
    13f4:	22 1f       	adc	r18, r18
    13f6:	74 9f       	mul	r23, r20
    13f8:	33 27       	eor	r19, r19
    13fa:	a0 0d       	add	r26, r0
    13fc:	61 1d       	adc	r22, r1
    13fe:	23 1f       	adc	r18, r19
    1400:	84 9f       	mul	r24, r20
    1402:	60 0d       	add	r22, r0
    1404:	21 1d       	adc	r18, r1
    1406:	82 2f       	mov	r24, r18
    1408:	76 2f       	mov	r23, r22
    140a:	6a 2f       	mov	r22, r26
    140c:	11 24       	eor	r1, r1
    140e:	9f 57       	subi	r25, 0x7F	; 127
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	8a f0       	brmi	.+34     	; 0x1436 <__mulsf3_pse+0x84>
    1414:	e1 f0       	breq	.+56     	; 0x144e <__mulsf3_pse+0x9c>
    1416:	88 23       	and	r24, r24
    1418:	4a f0       	brmi	.+18     	; 0x142c <__mulsf3_pse+0x7a>
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	bb 1f       	adc	r27, r27
    1420:	66 1f       	adc	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	50 40       	sbci	r21, 0x00	; 0
    142a:	a9 f7       	brne	.-22     	; 0x1416 <__mulsf3_pse+0x64>
    142c:	9e 3f       	cpi	r25, 0xFE	; 254
    142e:	51 05       	cpc	r21, r1
    1430:	70 f0       	brcs	.+28     	; 0x144e <__mulsf3_pse+0x9c>
    1432:	60 cf       	rjmp	.-320    	; 0x12f4 <__fp_inf>
    1434:	aa cf       	rjmp	.-172    	; 0x138a <__fp_szero>
    1436:	5f 3f       	cpi	r21, 0xFF	; 255
    1438:	ec f3       	brlt	.-6      	; 0x1434 <__mulsf3_pse+0x82>
    143a:	98 3e       	cpi	r25, 0xE8	; 232
    143c:	dc f3       	brlt	.-10     	; 0x1434 <__mulsf3_pse+0x82>
    143e:	86 95       	lsr	r24
    1440:	77 95       	ror	r23
    1442:	67 95       	ror	r22
    1444:	b7 95       	ror	r27
    1446:	f7 95       	ror	r31
    1448:	e7 95       	ror	r30
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	c1 f7       	brne	.-16     	; 0x143e <__mulsf3_pse+0x8c>
    144e:	fe 2b       	or	r31, r30
    1450:	88 0f       	add	r24, r24
    1452:	91 1d       	adc	r25, r1
    1454:	96 95       	lsr	r25
    1456:	87 95       	ror	r24
    1458:	97 f9       	bld	r25, 7
    145a:	08 95       	ret

0000145c <__prologue_saves__>:
    145c:	2f 92       	push	r2
    145e:	3f 92       	push	r3
    1460:	4f 92       	push	r4
    1462:	5f 92       	push	r5
    1464:	6f 92       	push	r6
    1466:	7f 92       	push	r7
    1468:	8f 92       	push	r8
    146a:	9f 92       	push	r9
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	ca 1b       	sub	r28, r26
    1486:	db 0b       	sbc	r29, r27
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	09 94       	ijmp

00001494 <__epilogue_restores__>:
    1494:	2a 88       	ldd	r2, Y+18	; 0x12
    1496:	39 88       	ldd	r3, Y+17	; 0x11
    1498:	48 88       	ldd	r4, Y+16	; 0x10
    149a:	5f 84       	ldd	r5, Y+15	; 0x0f
    149c:	6e 84       	ldd	r6, Y+14	; 0x0e
    149e:	7d 84       	ldd	r7, Y+13	; 0x0d
    14a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    14a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    14a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    14a6:	b9 84       	ldd	r11, Y+9	; 0x09
    14a8:	c8 84       	ldd	r12, Y+8	; 0x08
    14aa:	df 80       	ldd	r13, Y+7	; 0x07
    14ac:	ee 80       	ldd	r14, Y+6	; 0x06
    14ae:	fd 80       	ldd	r15, Y+5	; 0x05
    14b0:	0c 81       	ldd	r16, Y+4	; 0x04
    14b2:	1b 81       	ldd	r17, Y+3	; 0x03
    14b4:	aa 81       	ldd	r26, Y+2	; 0x02
    14b6:	b9 81       	ldd	r27, Y+1	; 0x01
    14b8:	ce 0f       	add	r28, r30
    14ba:	d1 1d       	adc	r29, r1
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	ed 01       	movw	r28, r26
    14c8:	08 95       	ret

000014ca <__ftoa_engine>:
    14ca:	28 30       	cpi	r18, 0x08	; 8
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <__ftoa_engine+0x6>
    14ce:	27 e0       	ldi	r18, 0x07	; 7
    14d0:	33 27       	eor	r19, r19
    14d2:	da 01       	movw	r26, r20
    14d4:	99 0f       	add	r25, r25
    14d6:	31 1d       	adc	r19, r1
    14d8:	87 fd       	sbrc	r24, 7
    14da:	91 60       	ori	r25, 0x01	; 1
    14dc:	00 96       	adiw	r24, 0x00	; 0
    14de:	61 05       	cpc	r22, r1
    14e0:	71 05       	cpc	r23, r1
    14e2:	39 f4       	brne	.+14     	; 0x14f2 <__ftoa_engine+0x28>
    14e4:	32 60       	ori	r19, 0x02	; 2
    14e6:	2e 5f       	subi	r18, 0xFE	; 254
    14e8:	3d 93       	st	X+, r19
    14ea:	30 e3       	ldi	r19, 0x30	; 48
    14ec:	2a 95       	dec	r18
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <__ftoa_engine+0x1e>
    14f0:	08 95       	ret
    14f2:	9f 3f       	cpi	r25, 0xFF	; 255
    14f4:	30 f0       	brcs	.+12     	; 0x1502 <__ftoa_engine+0x38>
    14f6:	80 38       	cpi	r24, 0x80	; 128
    14f8:	71 05       	cpc	r23, r1
    14fa:	61 05       	cpc	r22, r1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <__ftoa_engine+0x36>
    14fe:	3c 5f       	subi	r19, 0xFC	; 252
    1500:	3c 5f       	subi	r19, 0xFC	; 252
    1502:	3d 93       	st	X+, r19
    1504:	91 30       	cpi	r25, 0x01	; 1
    1506:	08 f0       	brcs	.+2      	; 0x150a <__ftoa_engine+0x40>
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	91 1d       	adc	r25, r1
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	1f 93       	push	r17
    1512:	0f 93       	push	r16
    1514:	ff 92       	push	r15
    1516:	ef 92       	push	r14
    1518:	19 2f       	mov	r17, r25
    151a:	98 7f       	andi	r25, 0xF8	; 248
    151c:	96 95       	lsr	r25
    151e:	e9 2f       	mov	r30, r25
    1520:	96 95       	lsr	r25
    1522:	96 95       	lsr	r25
    1524:	e9 0f       	add	r30, r25
    1526:	ff 27       	eor	r31, r31
    1528:	ed 5c       	subi	r30, 0xCD	; 205
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	99 27       	eor	r25, r25
    152e:	33 27       	eor	r19, r19
    1530:	ee 24       	eor	r14, r14
    1532:	ff 24       	eor	r15, r15
    1534:	a7 01       	movw	r20, r14
    1536:	e7 01       	movw	r28, r14
    1538:	05 90       	lpm	r0, Z+
    153a:	08 94       	sec
    153c:	07 94       	ror	r0
    153e:	28 f4       	brcc	.+10     	; 0x154a <__ftoa_engine+0x80>
    1540:	36 0f       	add	r19, r22
    1542:	e7 1e       	adc	r14, r23
    1544:	f8 1e       	adc	r15, r24
    1546:	49 1f       	adc	r20, r25
    1548:	51 1d       	adc	r21, r1
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	88 1f       	adc	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	06 94       	lsr	r0
    1554:	a1 f7       	brne	.-24     	; 0x153e <__ftoa_engine+0x74>
    1556:	05 90       	lpm	r0, Z+
    1558:	07 94       	ror	r0
    155a:	28 f4       	brcc	.+10     	; 0x1566 <__ftoa_engine+0x9c>
    155c:	e7 0e       	add	r14, r23
    155e:	f8 1e       	adc	r15, r24
    1560:	49 1f       	adc	r20, r25
    1562:	56 1f       	adc	r21, r22
    1564:	c1 1d       	adc	r28, r1
    1566:	77 0f       	add	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	66 1f       	adc	r22, r22
    156e:	06 94       	lsr	r0
    1570:	a1 f7       	brne	.-24     	; 0x155a <__ftoa_engine+0x90>
    1572:	05 90       	lpm	r0, Z+
    1574:	07 94       	ror	r0
    1576:	28 f4       	brcc	.+10     	; 0x1582 <__ftoa_engine+0xb8>
    1578:	f8 0e       	add	r15, r24
    157a:	49 1f       	adc	r20, r25
    157c:	56 1f       	adc	r21, r22
    157e:	c7 1f       	adc	r28, r23
    1580:	d1 1d       	adc	r29, r1
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	66 1f       	adc	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	06 94       	lsr	r0
    158c:	a1 f7       	brne	.-24     	; 0x1576 <__ftoa_engine+0xac>
    158e:	05 90       	lpm	r0, Z+
    1590:	07 94       	ror	r0
    1592:	20 f4       	brcc	.+8      	; 0x159c <__ftoa_engine+0xd2>
    1594:	49 0f       	add	r20, r25
    1596:	56 1f       	adc	r21, r22
    1598:	c7 1f       	adc	r28, r23
    159a:	d8 1f       	adc	r29, r24
    159c:	99 0f       	add	r25, r25
    159e:	66 1f       	adc	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	06 94       	lsr	r0
    15a6:	a9 f7       	brne	.-22     	; 0x1592 <__ftoa_engine+0xc8>
    15a8:	84 91       	lpm	r24, Z+
    15aa:	10 95       	com	r17
    15ac:	17 70       	andi	r17, 0x07	; 7
    15ae:	41 f0       	breq	.+16     	; 0x15c0 <__ftoa_engine+0xf6>
    15b0:	d6 95       	lsr	r29
    15b2:	c7 95       	ror	r28
    15b4:	57 95       	ror	r21
    15b6:	47 95       	ror	r20
    15b8:	f7 94       	ror	r15
    15ba:	e7 94       	ror	r14
    15bc:	1a 95       	dec	r17
    15be:	c1 f7       	brne	.-16     	; 0x15b0 <__ftoa_engine+0xe6>
    15c0:	e9 ed       	ldi	r30, 0xD9	; 217
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	68 94       	set
    15c6:	15 90       	lpm	r1, Z+
    15c8:	15 91       	lpm	r17, Z+
    15ca:	35 91       	lpm	r19, Z+
    15cc:	65 91       	lpm	r22, Z+
    15ce:	95 91       	lpm	r25, Z+
    15d0:	05 90       	lpm	r0, Z+
    15d2:	7f e2       	ldi	r23, 0x2F	; 47
    15d4:	73 95       	inc	r23
    15d6:	e1 18       	sub	r14, r1
    15d8:	f1 0a       	sbc	r15, r17
    15da:	43 0b       	sbc	r20, r19
    15dc:	56 0b       	sbc	r21, r22
    15de:	c9 0b       	sbc	r28, r25
    15e0:	d0 09       	sbc	r29, r0
    15e2:	c0 f7       	brcc	.-16     	; 0x15d4 <__ftoa_engine+0x10a>
    15e4:	e1 0c       	add	r14, r1
    15e6:	f1 1e       	adc	r15, r17
    15e8:	43 1f       	adc	r20, r19
    15ea:	56 1f       	adc	r21, r22
    15ec:	c9 1f       	adc	r28, r25
    15ee:	d0 1d       	adc	r29, r0
    15f0:	7e f4       	brtc	.+30     	; 0x1610 <__ftoa_engine+0x146>
    15f2:	70 33       	cpi	r23, 0x30	; 48
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__ftoa_engine+0x130>
    15f6:	8a 95       	dec	r24
    15f8:	e6 cf       	rjmp	.-52     	; 0x15c6 <__ftoa_engine+0xfc>
    15fa:	e8 94       	clt
    15fc:	01 50       	subi	r16, 0x01	; 1
    15fe:	30 f0       	brcs	.+12     	; 0x160c <__ftoa_engine+0x142>
    1600:	08 0f       	add	r16, r24
    1602:	0a f4       	brpl	.+2      	; 0x1606 <__ftoa_engine+0x13c>
    1604:	00 27       	eor	r16, r16
    1606:	02 17       	cp	r16, r18
    1608:	08 f4       	brcc	.+2      	; 0x160c <__ftoa_engine+0x142>
    160a:	20 2f       	mov	r18, r16
    160c:	23 95       	inc	r18
    160e:	02 2f       	mov	r16, r18
    1610:	7a 33       	cpi	r23, 0x3A	; 58
    1612:	28 f0       	brcs	.+10     	; 0x161e <__ftoa_engine+0x154>
    1614:	79 e3       	ldi	r23, 0x39	; 57
    1616:	7d 93       	st	X+, r23
    1618:	2a 95       	dec	r18
    161a:	e9 f7       	brne	.-6      	; 0x1616 <__ftoa_engine+0x14c>
    161c:	10 c0       	rjmp	.+32     	; 0x163e <__ftoa_engine+0x174>
    161e:	7d 93       	st	X+, r23
    1620:	2a 95       	dec	r18
    1622:	89 f6       	brne	.-94     	; 0x15c6 <__ftoa_engine+0xfc>
    1624:	06 94       	lsr	r0
    1626:	97 95       	ror	r25
    1628:	67 95       	ror	r22
    162a:	37 95       	ror	r19
    162c:	17 95       	ror	r17
    162e:	17 94       	ror	r1
    1630:	e1 18       	sub	r14, r1
    1632:	f1 0a       	sbc	r15, r17
    1634:	43 0b       	sbc	r20, r19
    1636:	56 0b       	sbc	r21, r22
    1638:	c9 0b       	sbc	r28, r25
    163a:	d0 09       	sbc	r29, r0
    163c:	98 f0       	brcs	.+38     	; 0x1664 <__ftoa_engine+0x19a>
    163e:	23 95       	inc	r18
    1640:	7e 91       	ld	r23, -X
    1642:	73 95       	inc	r23
    1644:	7a 33       	cpi	r23, 0x3A	; 58
    1646:	08 f0       	brcs	.+2      	; 0x164a <__ftoa_engine+0x180>
    1648:	70 e3       	ldi	r23, 0x30	; 48
    164a:	7c 93       	st	X, r23
    164c:	20 13       	cpse	r18, r16
    164e:	b8 f7       	brcc	.-18     	; 0x163e <__ftoa_engine+0x174>
    1650:	7e 91       	ld	r23, -X
    1652:	70 61       	ori	r23, 0x10	; 16
    1654:	7d 93       	st	X+, r23
    1656:	30 f0       	brcs	.+12     	; 0x1664 <__ftoa_engine+0x19a>
    1658:	83 95       	inc	r24
    165a:	71 e3       	ldi	r23, 0x31	; 49
    165c:	7d 93       	st	X+, r23
    165e:	70 e3       	ldi	r23, 0x30	; 48
    1660:	2a 95       	dec	r18
    1662:	e1 f7       	brne	.-8      	; 0x165c <__ftoa_engine+0x192>
    1664:	11 24       	eor	r1, r1
    1666:	ef 90       	pop	r14
    1668:	ff 90       	pop	r15
    166a:	0f 91       	pop	r16
    166c:	1f 91       	pop	r17
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	99 27       	eor	r25, r25
    1674:	87 fd       	sbrc	r24, 7
    1676:	90 95       	com	r25
    1678:	08 95       	ret

0000167a <strnlen_P>:
    167a:	fc 01       	movw	r30, r24
    167c:	05 90       	lpm	r0, Z+
    167e:	61 50       	subi	r22, 0x01	; 1
    1680:	70 40       	sbci	r23, 0x00	; 0
    1682:	01 10       	cpse	r0, r1
    1684:	d8 f7       	brcc	.-10     	; 0x167c <strnlen_P+0x2>
    1686:	80 95       	com	r24
    1688:	90 95       	com	r25
    168a:	8e 0f       	add	r24, r30
    168c:	9f 1f       	adc	r25, r31
    168e:	08 95       	ret

00001690 <strnlen>:
    1690:	fc 01       	movw	r30, r24
    1692:	61 50       	subi	r22, 0x01	; 1
    1694:	70 40       	sbci	r23, 0x00	; 0
    1696:	01 90       	ld	r0, Z+
    1698:	01 10       	cpse	r0, r1
    169a:	d8 f7       	brcc	.-10     	; 0x1692 <strnlen+0x2>
    169c:	80 95       	com	r24
    169e:	90 95       	com	r25
    16a0:	8e 0f       	add	r24, r30
    16a2:	9f 1f       	adc	r25, r31
    16a4:	08 95       	ret

000016a6 <itoa>:
    16a6:	fb 01       	movw	r30, r22
    16a8:	9f 01       	movw	r18, r30
    16aa:	e8 94       	clt
    16ac:	42 30       	cpi	r20, 0x02	; 2
    16ae:	c4 f0       	brlt	.+48     	; 0x16e0 <itoa+0x3a>
    16b0:	45 32       	cpi	r20, 0x25	; 37
    16b2:	b4 f4       	brge	.+44     	; 0x16e0 <itoa+0x3a>
    16b4:	4a 30       	cpi	r20, 0x0A	; 10
    16b6:	29 f4       	brne	.+10     	; 0x16c2 <itoa+0x1c>
    16b8:	97 fb       	bst	r25, 7
    16ba:	1e f4       	brtc	.+6      	; 0x16c2 <itoa+0x1c>
    16bc:	90 95       	com	r25
    16be:	81 95       	neg	r24
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	64 2f       	mov	r22, r20
    16c4:	77 27       	eor	r23, r23
    16c6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__udivmodhi4>
    16ca:	80 5d       	subi	r24, 0xD0	; 208
    16cc:	8a 33       	cpi	r24, 0x3A	; 58
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <itoa+0x2c>
    16d0:	89 5d       	subi	r24, 0xD9	; 217
    16d2:	81 93       	st	Z+, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	a1 f7       	brne	.-24     	; 0x16c2 <itoa+0x1c>
    16da:	16 f4       	brtc	.+4      	; 0x16e0 <itoa+0x3a>
    16dc:	5d e2       	ldi	r21, 0x2D	; 45
    16de:	51 93       	st	Z+, r21
    16e0:	10 82       	st	Z, r1
    16e2:	c9 01       	movw	r24, r18
    16e4:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <strrev>

000016e8 <fprintf_P>:
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e7       	ldi	r30, 0x7A	; 122
    16ee:	fb e0       	ldi	r31, 0x0B	; 11
    16f0:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__prologue_saves__+0x1c>
    16f4:	0f 81       	ldd	r16, Y+7	; 0x07
    16f6:	18 85       	ldd	r17, Y+8	; 0x08
    16f8:	9e 01       	movw	r18, r28
    16fa:	25 5f       	subi	r18, 0xF5	; 245
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	f8 01       	movw	r30, r16
    1700:	83 81       	ldd	r24, Z+3	; 0x03
    1702:	88 60       	ori	r24, 0x08	; 8
    1704:	83 83       	std	Z+3, r24	; 0x03
    1706:	c8 01       	movw	r24, r16
    1708:	69 85       	ldd	r22, Y+9	; 0x09
    170a:	7a 85       	ldd	r23, Y+10	; 0x0a
    170c:	a9 01       	movw	r20, r18
    170e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <vfprintf>
    1712:	f8 01       	movw	r30, r16
    1714:	23 81       	ldd	r18, Z+3	; 0x03
    1716:	27 7f       	andi	r18, 0xF7	; 247
    1718:	23 83       	std	Z+3, r18	; 0x03
    171a:	20 96       	adiw	r28, 0x00	; 0
    171c:	e4 e0       	ldi	r30, 0x04	; 4
    171e:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__epilogue_restores__+0x1c>

00001722 <fputc>:
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	8c 01       	movw	r16, r24
    172c:	eb 01       	movw	r28, r22
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	81 ff       	sbrs	r24, 1
    1732:	1b c0       	rjmp	.+54     	; 0x176a <fputc+0x48>
    1734:	82 ff       	sbrs	r24, 2
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <fputc+0x30>
    1738:	2e 81       	ldd	r18, Y+6	; 0x06
    173a:	3f 81       	ldd	r19, Y+7	; 0x07
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	28 17       	cp	r18, r24
    1742:	39 07       	cpc	r19, r25
    1744:	64 f4       	brge	.+24     	; 0x175e <fputc+0x3c>
    1746:	e8 81       	ld	r30, Y
    1748:	f9 81       	ldd	r31, Y+1	; 0x01
    174a:	01 93       	st	Z+, r16
    174c:	f9 83       	std	Y+1, r31	; 0x01
    174e:	e8 83       	st	Y, r30
    1750:	06 c0       	rjmp	.+12     	; 0x175e <fputc+0x3c>
    1752:	e8 85       	ldd	r30, Y+8	; 0x08
    1754:	f9 85       	ldd	r31, Y+9	; 0x09
    1756:	80 2f       	mov	r24, r16
    1758:	09 95       	icall
    175a:	89 2b       	or	r24, r25
    175c:	31 f4       	brne	.+12     	; 0x176a <fputc+0x48>
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	9f 81       	ldd	r25, Y+7	; 0x07
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	9f 83       	std	Y+7, r25	; 0x07
    1766:	8e 83       	std	Y+6, r24	; 0x06
    1768:	02 c0       	rjmp	.+4      	; 0x176e <fputc+0x4c>
    176a:	0f ef       	ldi	r16, 0xFF	; 255
    176c:	1f ef       	ldi	r17, 0xFF	; 255
    176e:	c8 01       	movw	r24, r16
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <__ultoa_invert>:
    177a:	fa 01       	movw	r30, r20
    177c:	aa 27       	eor	r26, r26
    177e:	28 30       	cpi	r18, 0x08	; 8
    1780:	51 f1       	breq	.+84     	; 0x17d6 <__ultoa_invert+0x5c>
    1782:	20 31       	cpi	r18, 0x10	; 16
    1784:	81 f1       	breq	.+96     	; 0x17e6 <__ultoa_invert+0x6c>
    1786:	e8 94       	clt
    1788:	6f 93       	push	r22
    178a:	6e 7f       	andi	r22, 0xFE	; 254
    178c:	6e 5f       	subi	r22, 0xFE	; 254
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	af 4f       	sbci	r26, 0xFF	; 255
    1796:	b1 e0       	ldi	r27, 0x01	; 1
    1798:	3e d0       	rcall	.+124    	; 0x1816 <__ultoa_invert+0x9c>
    179a:	b4 e0       	ldi	r27, 0x04	; 4
    179c:	3c d0       	rcall	.+120    	; 0x1816 <__ultoa_invert+0x9c>
    179e:	67 0f       	add	r22, r23
    17a0:	78 1f       	adc	r23, r24
    17a2:	89 1f       	adc	r24, r25
    17a4:	9a 1f       	adc	r25, r26
    17a6:	a1 1d       	adc	r26, r1
    17a8:	68 0f       	add	r22, r24
    17aa:	79 1f       	adc	r23, r25
    17ac:	8a 1f       	adc	r24, r26
    17ae:	91 1d       	adc	r25, r1
    17b0:	a1 1d       	adc	r26, r1
    17b2:	6a 0f       	add	r22, r26
    17b4:	71 1d       	adc	r23, r1
    17b6:	81 1d       	adc	r24, r1
    17b8:	91 1d       	adc	r25, r1
    17ba:	a1 1d       	adc	r26, r1
    17bc:	20 d0       	rcall	.+64     	; 0x17fe <__ultoa_invert+0x84>
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__ultoa_invert+0x48>
    17c0:	68 94       	set
    17c2:	3f 91       	pop	r19
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	26 9f       	mul	r18, r22
    17c8:	11 24       	eor	r1, r1
    17ca:	30 19       	sub	r19, r0
    17cc:	30 5d       	subi	r19, 0xD0	; 208
    17ce:	31 93       	st	Z+, r19
    17d0:	de f6       	brtc	.-74     	; 0x1788 <__ultoa_invert+0xe>
    17d2:	cf 01       	movw	r24, r30
    17d4:	08 95       	ret
    17d6:	46 2f       	mov	r20, r22
    17d8:	47 70       	andi	r20, 0x07	; 7
    17da:	40 5d       	subi	r20, 0xD0	; 208
    17dc:	41 93       	st	Z+, r20
    17de:	b3 e0       	ldi	r27, 0x03	; 3
    17e0:	0f d0       	rcall	.+30     	; 0x1800 <__ultoa_invert+0x86>
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <__ultoa_invert+0x5c>
    17e4:	f6 cf       	rjmp	.-20     	; 0x17d2 <__ultoa_invert+0x58>
    17e6:	46 2f       	mov	r20, r22
    17e8:	4f 70       	andi	r20, 0x0F	; 15
    17ea:	40 5d       	subi	r20, 0xD0	; 208
    17ec:	4a 33       	cpi	r20, 0x3A	; 58
    17ee:	18 f0       	brcs	.+6      	; 0x17f6 <__ultoa_invert+0x7c>
    17f0:	49 5d       	subi	r20, 0xD9	; 217
    17f2:	31 fd       	sbrc	r19, 1
    17f4:	40 52       	subi	r20, 0x20	; 32
    17f6:	41 93       	st	Z+, r20
    17f8:	02 d0       	rcall	.+4      	; 0x17fe <__ultoa_invert+0x84>
    17fa:	a9 f7       	brne	.-22     	; 0x17e6 <__ultoa_invert+0x6c>
    17fc:	ea cf       	rjmp	.-44     	; 0x17d2 <__ultoa_invert+0x58>
    17fe:	b4 e0       	ldi	r27, 0x04	; 4
    1800:	a6 95       	lsr	r26
    1802:	97 95       	ror	r25
    1804:	87 95       	ror	r24
    1806:	77 95       	ror	r23
    1808:	67 95       	ror	r22
    180a:	ba 95       	dec	r27
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__ultoa_invert+0x86>
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 05       	cpc	r22, r1
    1812:	71 05       	cpc	r23, r1
    1814:	08 95       	ret
    1816:	9b 01       	movw	r18, r22
    1818:	ac 01       	movw	r20, r24
    181a:	0a 2e       	mov	r0, r26
    181c:	06 94       	lsr	r0
    181e:	57 95       	ror	r21
    1820:	47 95       	ror	r20
    1822:	37 95       	ror	r19
    1824:	27 95       	ror	r18
    1826:	ba 95       	dec	r27
    1828:	c9 f7       	brne	.-14     	; 0x181c <__ultoa_invert+0xa2>
    182a:	62 0f       	add	r22, r18
    182c:	73 1f       	adc	r23, r19
    182e:	84 1f       	adc	r24, r20
    1830:	95 1f       	adc	r25, r21
    1832:	a0 1d       	adc	r26, r0
    1834:	08 95       	ret

00001836 <strrev>:
    1836:	dc 01       	movw	r26, r24
    1838:	fc 01       	movw	r30, r24
    183a:	67 2f       	mov	r22, r23
    183c:	71 91       	ld	r23, Z+
    183e:	77 23       	and	r23, r23
    1840:	e1 f7       	brne	.-8      	; 0x183a <strrev+0x4>
    1842:	32 97       	sbiw	r30, 0x02	; 2
    1844:	04 c0       	rjmp	.+8      	; 0x184e <strrev+0x18>
    1846:	7c 91       	ld	r23, X
    1848:	6d 93       	st	X+, r22
    184a:	70 83       	st	Z, r23
    184c:	62 91       	ld	r22, -Z
    184e:	ae 17       	cp	r26, r30
    1850:	bf 07       	cpc	r27, r31
    1852:	c8 f3       	brcs	.-14     	; 0x1846 <strrev+0x10>
    1854:	08 95       	ret

00001856 <__udivmodhi4>:
    1856:	aa 1b       	sub	r26, r26
    1858:	bb 1b       	sub	r27, r27
    185a:	51 e1       	ldi	r21, 0x11	; 17
    185c:	07 c0       	rjmp	.+14     	; 0x186c <__udivmodhi4_ep>

0000185e <__udivmodhi4_loop>:
    185e:	aa 1f       	adc	r26, r26
    1860:	bb 1f       	adc	r27, r27
    1862:	a6 17       	cp	r26, r22
    1864:	b7 07       	cpc	r27, r23
    1866:	10 f0       	brcs	.+4      	; 0x186c <__udivmodhi4_ep>
    1868:	a6 1b       	sub	r26, r22
    186a:	b7 0b       	sbc	r27, r23

0000186c <__udivmodhi4_ep>:
    186c:	88 1f       	adc	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	5a 95       	dec	r21
    1872:	a9 f7       	brne	.-22     	; 0x185e <__udivmodhi4_loop>
    1874:	80 95       	com	r24
    1876:	90 95       	com	r25
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	08 95       	ret

0000187e <_exit>:
    187e:	f8 94       	cli

00001880 <__stop_program>:
    1880:	ff cf       	rjmp	.-2      	; 0x1880 <__stop_program>
